
EX8_RADIO_TX_NRF24L01_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003460  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000059c  0800356c  0800356c  0001356c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b08  08003b08  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  08003b08  08003b08  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b08  08003b08  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b08  08003b08  00013b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b0c  08003b0c  00013b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08003b10  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  20000098  08003ba8  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08003ba8  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007af4  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015a9  00000000  00000000  00027bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007a0  00000000  00000000  00029160  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006e8  00000000  00000000  00029900  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013d77  00000000  00000000  00029fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005fa9  00000000  00000000  0003dd5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006ad1f  00000000  00000000  00043d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000aea27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020d8  00000000  00000000  000aeaa4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	08003554 	.word	0x08003554

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	08003554 	.word	0x08003554

0800014c <NRF24_DelayMicroSeconds>:
//static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000158:	4b0a      	ldr	r3, [pc, #40]	; (8000184 <NRF24_DelayMicroSeconds+0x38>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	4a0a      	ldr	r2, [pc, #40]	; (8000188 <NRF24_DelayMicroSeconds+0x3c>)
 800015e:	fba2 2303 	umull	r2, r3, r2, r3
 8000162:	0c9a      	lsrs	r2, r3, #18
 8000164:	68fb      	ldr	r3, [r7, #12]
 8000166:	fb02 f303 	mul.w	r3, r2, r3
 800016a:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 800016c:	bf00      	nop
 800016e:	68fb      	ldr	r3, [r7, #12]
 8000170:	1e5a      	subs	r2, r3, #1
 8000172:	60fa      	str	r2, [r7, #12]
 8000174:	2b00      	cmp	r3, #0
 8000176:	d1fa      	bne.n	800016e <NRF24_DelayMicroSeconds+0x22>
}
 8000178:	bf00      	nop
 800017a:	3714      	adds	r7, #20
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop
 8000184:	20000028 	.word	0x20000028
 8000188:	165e9f81 	.word	0x165e9f81

0800018c <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b082      	sub	sp, #8
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	2b00      	cmp	r3, #0
 8000198:	d008      	beq.n	80001ac <NRF24_csn+0x20>
 800019a:	4b0a      	ldr	r3, [pc, #40]	; (80001c4 <NRF24_csn+0x38>)
 800019c:	6818      	ldr	r0, [r3, #0]
 800019e:	4b0a      	ldr	r3, [pc, #40]	; (80001c8 <NRF24_csn+0x3c>)
 80001a0:	881b      	ldrh	r3, [r3, #0]
 80001a2:	2201      	movs	r2, #1
 80001a4:	4619      	mov	r1, r3
 80001a6:	f001 fc73 	bl	8001a90 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80001aa:	e007      	b.n	80001bc <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80001ac:	4b05      	ldr	r3, [pc, #20]	; (80001c4 <NRF24_csn+0x38>)
 80001ae:	6818      	ldr	r0, [r3, #0]
 80001b0:	4b05      	ldr	r3, [pc, #20]	; (80001c8 <NRF24_csn+0x3c>)
 80001b2:	881b      	ldrh	r3, [r3, #0]
 80001b4:	2200      	movs	r2, #0
 80001b6:	4619      	mov	r1, r3
 80001b8:	f001 fc6a 	bl	8001a90 <HAL_GPIO_WritePin>
}
 80001bc:	bf00      	nop
 80001be:	3708      	adds	r7, #8
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bd80      	pop	{r7, pc}
 80001c4:	200000bc 	.word	0x200000bc
 80001c8:	200000c0 	.word	0x200000c0

080001cc <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d008      	beq.n	80001ec <NRF24_ce+0x20>
 80001da:	4b0a      	ldr	r3, [pc, #40]	; (8000204 <NRF24_ce+0x38>)
 80001dc:	6818      	ldr	r0, [r3, #0]
 80001de:	4b0a      	ldr	r3, [pc, #40]	; (8000208 <NRF24_ce+0x3c>)
 80001e0:	881b      	ldrh	r3, [r3, #0]
 80001e2:	2201      	movs	r2, #1
 80001e4:	4619      	mov	r1, r3
 80001e6:	f001 fc53 	bl	8001a90 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 80001ea:	e007      	b.n	80001fc <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80001ec:	4b05      	ldr	r3, [pc, #20]	; (8000204 <NRF24_ce+0x38>)
 80001ee:	6818      	ldr	r0, [r3, #0]
 80001f0:	4b05      	ldr	r3, [pc, #20]	; (8000208 <NRF24_ce+0x3c>)
 80001f2:	881b      	ldrh	r3, [r3, #0]
 80001f4:	2200      	movs	r2, #0
 80001f6:	4619      	mov	r1, r3
 80001f8:	f001 fc4a 	bl	8001a90 <HAL_GPIO_WritePin>
}
 80001fc:	bf00      	nop
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}
 8000204:	200000bc 	.word	0x200000bc
 8000208:	200000c2 	.word	0x200000c2

0800020c <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b084      	sub	sp, #16
 8000210:	af00      	add	r7, sp, #0
 8000212:	4603      	mov	r3, r0
 8000214:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000216:	2000      	movs	r0, #0
 8000218:	f7ff ffb8 	bl	800018c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800021c:	79fb      	ldrb	r3, [r7, #7]
 800021e:	f003 031f 	and.w	r3, r3, #31
 8000222:	b2db      	uxtb	r3, r3
 8000224:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000226:	f107 010c 	add.w	r1, r7, #12
 800022a:	2364      	movs	r3, #100	; 0x64
 800022c:	2201      	movs	r2, #1
 800022e:	480a      	ldr	r0, [pc, #40]	; (8000258 <NRF24_read_register+0x4c>)
 8000230:	f002 f891 	bl	8002356 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000234:	f107 030c 	add.w	r3, r7, #12
 8000238:	1c59      	adds	r1, r3, #1
 800023a:	2364      	movs	r3, #100	; 0x64
 800023c:	2201      	movs	r2, #1
 800023e:	4806      	ldr	r0, [pc, #24]	; (8000258 <NRF24_read_register+0x4c>)
 8000240:	f002 f9bd 	bl	80025be <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000244:	7b7b      	ldrb	r3, [r7, #13]
 8000246:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000248:	2001      	movs	r0, #1
 800024a:	f7ff ff9f 	bl	800018c <NRF24_csn>
	return retData;
 800024e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000250:	4618      	mov	r0, r3
 8000252:	3710      	adds	r7, #16
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	200000c4 	.word	0x200000c4

0800025c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b084      	sub	sp, #16
 8000260:	af00      	add	r7, sp, #0
 8000262:	4603      	mov	r3, r0
 8000264:	6039      	str	r1, [r7, #0]
 8000266:	71fb      	strb	r3, [r7, #7]
 8000268:	4613      	mov	r3, r2
 800026a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800026c:	2000      	movs	r0, #0
 800026e:	f7ff ff8d 	bl	800018c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000272:	79fb      	ldrb	r3, [r7, #7]
 8000274:	f003 031f 	and.w	r3, r3, #31
 8000278:	b2db      	uxtb	r3, r3
 800027a:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800027c:	f107 010c 	add.w	r1, r7, #12
 8000280:	2364      	movs	r3, #100	; 0x64
 8000282:	2201      	movs	r2, #1
 8000284:	4808      	ldr	r0, [pc, #32]	; (80002a8 <NRF24_read_registerN+0x4c>)
 8000286:	f002 f866 	bl	8002356 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 800028a:	79bb      	ldrb	r3, [r7, #6]
 800028c:	b29a      	uxth	r2, r3
 800028e:	2364      	movs	r3, #100	; 0x64
 8000290:	6839      	ldr	r1, [r7, #0]
 8000292:	4805      	ldr	r0, [pc, #20]	; (80002a8 <NRF24_read_registerN+0x4c>)
 8000294:	f002 f993 	bl	80025be <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000298:	2001      	movs	r0, #1
 800029a:	f7ff ff77 	bl	800018c <NRF24_csn>
}
 800029e:	bf00      	nop
 80002a0:	3710      	adds	r7, #16
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	200000c4 	.word	0x200000c4

080002ac <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4603      	mov	r3, r0
 80002b4:	460a      	mov	r2, r1
 80002b6:	71fb      	strb	r3, [r7, #7]
 80002b8:	4613      	mov	r3, r2
 80002ba:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80002bc:	2000      	movs	r0, #0
 80002be:	f7ff ff65 	bl	800018c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	f043 0320 	orr.w	r3, r3, #32
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 80002cc:	79bb      	ldrb	r3, [r7, #6]
 80002ce:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80002d0:	f107 010c 	add.w	r1, r7, #12
 80002d4:	2364      	movs	r3, #100	; 0x64
 80002d6:	2202      	movs	r2, #2
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <NRF24_write_register+0x40>)
 80002da:	f002 f83c 	bl	8002356 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80002de:	2001      	movs	r0, #1
 80002e0:	f7ff ff54 	bl	800018c <NRF24_csn>
}
 80002e4:	bf00      	nop
 80002e6:	3710      	adds	r7, #16
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	200000c4 	.word	0x200000c4

080002f0 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b084      	sub	sp, #16
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	6039      	str	r1, [r7, #0]
 80002fa:	71fb      	strb	r3, [r7, #7]
 80002fc:	4613      	mov	r3, r2
 80002fe:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000300:	2000      	movs	r0, #0
 8000302:	f7ff ff43 	bl	800018c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000306:	79fb      	ldrb	r3, [r7, #7]
 8000308:	f043 0320 	orr.w	r3, r3, #32
 800030c:	b2db      	uxtb	r3, r3
 800030e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000310:	f107 010c 	add.w	r1, r7, #12
 8000314:	2364      	movs	r3, #100	; 0x64
 8000316:	2201      	movs	r2, #1
 8000318:	4808      	ldr	r0, [pc, #32]	; (800033c <NRF24_write_registerN+0x4c>)
 800031a:	f002 f81c 	bl	8002356 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 800031e:	79bb      	ldrb	r3, [r7, #6]
 8000320:	b29a      	uxth	r2, r3
 8000322:	2364      	movs	r3, #100	; 0x64
 8000324:	6839      	ldr	r1, [r7, #0]
 8000326:	4805      	ldr	r0, [pc, #20]	; (800033c <NRF24_write_registerN+0x4c>)
 8000328:	f002 f815 	bl	8002356 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800032c:	2001      	movs	r0, #1
 800032e:	f7ff ff2d 	bl	800018c <NRF24_csn>
}
 8000332:	bf00      	nop
 8000334:	3710      	adds	r7, #16
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	200000c4 	.word	0x200000c4

08000340 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b084      	sub	sp, #16
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
 8000348:	460b      	mov	r3, r1
 800034a:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 800034c:	2000      	movs	r0, #0
 800034e:	f7ff ff1d 	bl	800018c <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8000352:	23a0      	movs	r3, #160	; 0xa0
 8000354:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8000356:	f107 010f 	add.w	r1, r7, #15
 800035a:	2364      	movs	r3, #100	; 0x64
 800035c:	2201      	movs	r2, #1
 800035e:	4808      	ldr	r0, [pc, #32]	; (8000380 <NRF24_write_payload+0x40>)
 8000360:	f001 fff9 	bl	8002356 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8000364:	78fb      	ldrb	r3, [r7, #3]
 8000366:	b29a      	uxth	r2, r3
 8000368:	2364      	movs	r3, #100	; 0x64
 800036a:	6879      	ldr	r1, [r7, #4]
 800036c:	4804      	ldr	r0, [pc, #16]	; (8000380 <NRF24_write_payload+0x40>)
 800036e:	f001 fff2 	bl	8002356 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000372:	2001      	movs	r0, #1
 8000374:	f7ff ff0a 	bl	800018c <NRF24_csn>
}
 8000378:	bf00      	nop
 800037a:	3710      	adds	r7, #16
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	200000c4 	.word	0x200000c4

08000384 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000388:	21ff      	movs	r1, #255	; 0xff
 800038a:	20e1      	movs	r0, #225	; 0xe1
 800038c:	f7ff ff8e 	bl	80002ac <NRF24_write_register>
}
 8000390:	bf00      	nop
 8000392:	bd80      	pop	{r7, pc}

08000394 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000398:	21ff      	movs	r1, #255	; 0xff
 800039a:	20e2      	movs	r0, #226	; 0xe2
 800039c:	f7ff ff86 	bl	80002ac <NRF24_write_register>
}
 80003a0:	bf00      	nop
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 80003aa:	2007      	movs	r0, #7
 80003ac:	f7ff ff2e 	bl	800020c <NRF24_read_register>
 80003b0:	4603      	mov	r3, r0
 80003b2:	71fb      	strb	r3, [r7, #7]
	return statReg;
 80003b4:	79fb      	ldrb	r3, [r7, #7]
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
	...

080003c0 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 80003c0:	b082      	sub	sp, #8
 80003c2:	b580      	push	{r7, lr}
 80003c4:	b084      	sub	sp, #16
 80003c6:	af00      	add	r7, sp, #0
 80003c8:	6078      	str	r0, [r7, #4]
 80003ca:	61fb      	str	r3, [r7, #28]
 80003cc:	460b      	mov	r3, r1
 80003ce:	807b      	strh	r3, [r7, #2]
 80003d0:	4613      	mov	r3, r2
 80003d2:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 80003d4:	4b66      	ldr	r3, [pc, #408]	; (8000570 <NRF24_begin+0x1b0>)
 80003d6:	4618      	mov	r0, r3
 80003d8:	f107 031c 	add.w	r3, r7, #28
 80003dc:	2258      	movs	r2, #88	; 0x58
 80003de:	4619      	mov	r1, r3
 80003e0:	f002 fc9c 	bl	8002d1c <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 80003e4:	4a63      	ldr	r2, [pc, #396]	; (8000574 <NRF24_begin+0x1b4>)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 80003ea:	4a63      	ldr	r2, [pc, #396]	; (8000578 <NRF24_begin+0x1b8>)
 80003ec:	887b      	ldrh	r3, [r7, #2]
 80003ee:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 80003f0:	4a62      	ldr	r2, [pc, #392]	; (800057c <NRF24_begin+0x1bc>)
 80003f2:	883b      	ldrh	r3, [r7, #0]
 80003f4:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 80003f6:	2001      	movs	r0, #1
 80003f8:	f7ff fec8 	bl	800018c <NRF24_csn>
	NRF24_ce(0);
 80003fc:	2000      	movs	r0, #0
 80003fe:	f7ff fee5 	bl	80001cc <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000402:	2005      	movs	r0, #5
 8000404:	f001 f8e4 	bl	80015d0 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000408:	2108      	movs	r1, #8
 800040a:	2000      	movs	r0, #0
 800040c:	f7ff ff4e 	bl	80002ac <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000410:	213f      	movs	r1, #63	; 0x3f
 8000412:	2001      	movs	r0, #1
 8000414:	f7ff ff4a 	bl	80002ac <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000418:	2103      	movs	r1, #3
 800041a:	2002      	movs	r0, #2
 800041c:	f7ff ff46 	bl	80002ac <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000420:	2103      	movs	r1, #3
 8000422:	2003      	movs	r0, #3
 8000424:	f7ff ff42 	bl	80002ac <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000428:	2103      	movs	r1, #3
 800042a:	2004      	movs	r0, #4
 800042c:	f7ff ff3e 	bl	80002ac <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000430:	2102      	movs	r1, #2
 8000432:	2005      	movs	r0, #5
 8000434:	f7ff ff3a 	bl	80002ac <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000438:	210f      	movs	r1, #15
 800043a:	2006      	movs	r0, #6
 800043c:	f7ff ff36 	bl	80002ac <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000440:	210e      	movs	r1, #14
 8000442:	2007      	movs	r0, #7
 8000444:	f7ff ff32 	bl	80002ac <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000448:	2100      	movs	r1, #0
 800044a:	2008      	movs	r0, #8
 800044c:	f7ff ff2e 	bl	80002ac <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000450:	2100      	movs	r1, #0
 8000452:	2009      	movs	r0, #9
 8000454:	f7ff ff2a 	bl	80002ac <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000458:	23e7      	movs	r3, #231	; 0xe7
 800045a:	733b      	strb	r3, [r7, #12]
 800045c:	23e7      	movs	r3, #231	; 0xe7
 800045e:	72fb      	strb	r3, [r7, #11]
 8000460:	23e7      	movs	r3, #231	; 0xe7
 8000462:	72bb      	strb	r3, [r7, #10]
 8000464:	23e7      	movs	r3, #231	; 0xe7
 8000466:	727b      	strb	r3, [r7, #9]
 8000468:	23e7      	movs	r3, #231	; 0xe7
 800046a:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 800046c:	f107 0308 	add.w	r3, r7, #8
 8000470:	2205      	movs	r2, #5
 8000472:	4619      	mov	r1, r3
 8000474:	200a      	movs	r0, #10
 8000476:	f7ff ff3b 	bl	80002f0 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 800047a:	23c2      	movs	r3, #194	; 0xc2
 800047c:	733b      	strb	r3, [r7, #12]
 800047e:	23c2      	movs	r3, #194	; 0xc2
 8000480:	72fb      	strb	r3, [r7, #11]
 8000482:	23c2      	movs	r3, #194	; 0xc2
 8000484:	72bb      	strb	r3, [r7, #10]
 8000486:	23c2      	movs	r3, #194	; 0xc2
 8000488:	727b      	strb	r3, [r7, #9]
 800048a:	23c2      	movs	r3, #194	; 0xc2
 800048c:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 800048e:	f107 0308 	add.w	r3, r7, #8
 8000492:	2205      	movs	r2, #5
 8000494:	4619      	mov	r1, r3
 8000496:	200b      	movs	r0, #11
 8000498:	f7ff ff2a 	bl	80002f0 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 800049c:	21c3      	movs	r1, #195	; 0xc3
 800049e:	200c      	movs	r0, #12
 80004a0:	f7ff ff04 	bl	80002ac <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 80004a4:	21c4      	movs	r1, #196	; 0xc4
 80004a6:	200d      	movs	r0, #13
 80004a8:	f7ff ff00 	bl	80002ac <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 80004ac:	21c5      	movs	r1, #197	; 0xc5
 80004ae:	200e      	movs	r0, #14
 80004b0:	f7ff fefc 	bl	80002ac <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 80004b4:	21c6      	movs	r1, #198	; 0xc6
 80004b6:	200f      	movs	r0, #15
 80004b8:	f7ff fef8 	bl	80002ac <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 80004bc:	23e7      	movs	r3, #231	; 0xe7
 80004be:	733b      	strb	r3, [r7, #12]
 80004c0:	23e7      	movs	r3, #231	; 0xe7
 80004c2:	72fb      	strb	r3, [r7, #11]
 80004c4:	23e7      	movs	r3, #231	; 0xe7
 80004c6:	72bb      	strb	r3, [r7, #10]
 80004c8:	23e7      	movs	r3, #231	; 0xe7
 80004ca:	727b      	strb	r3, [r7, #9]
 80004cc:	23e7      	movs	r3, #231	; 0xe7
 80004ce:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 80004d0:	f107 0308 	add.w	r3, r7, #8
 80004d4:	2205      	movs	r2, #5
 80004d6:	4619      	mov	r1, r3
 80004d8:	2010      	movs	r0, #16
 80004da:	f7ff ff09 	bl	80002f0 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 80004de:	2100      	movs	r1, #0
 80004e0:	2011      	movs	r0, #17
 80004e2:	f7ff fee3 	bl	80002ac <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 80004e6:	2100      	movs	r1, #0
 80004e8:	2012      	movs	r0, #18
 80004ea:	f7ff fedf 	bl	80002ac <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 80004ee:	2100      	movs	r1, #0
 80004f0:	2013      	movs	r0, #19
 80004f2:	f7ff fedb 	bl	80002ac <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 80004f6:	2100      	movs	r1, #0
 80004f8:	2014      	movs	r0, #20
 80004fa:	f7ff fed7 	bl	80002ac <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 80004fe:	2100      	movs	r1, #0
 8000500:	2015      	movs	r0, #21
 8000502:	f7ff fed3 	bl	80002ac <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000506:	2100      	movs	r1, #0
 8000508:	2016      	movs	r0, #22
 800050a:	f7ff fecf 	bl	80002ac <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 800050e:	f000 fa81 	bl	8000a14 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000512:	2100      	movs	r1, #0
 8000514:	201c      	movs	r0, #28
 8000516:	f7ff fec9 	bl	80002ac <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 800051a:	2100      	movs	r1, #0
 800051c:	201d      	movs	r0, #29
 800051e:	f7ff fec5 	bl	80002ac <NRF24_write_register>
	printRadioSettings();
 8000522:	f000 fa91 	bl	8000a48 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000526:	210f      	movs	r1, #15
 8000528:	200f      	movs	r0, #15
 800052a:	f000 f8ad 	bl	8000688 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 800052e:	2003      	movs	r0, #3
 8000530:	f000 f925 	bl	800077e <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000534:	2001      	movs	r0, #1
 8000536:	f000 f95b 	bl	80007f0 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 800053a:	2002      	movs	r0, #2
 800053c:	f000 f99e 	bl	800087c <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000540:	f000 f8f0 	bl	8000724 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000544:	2020      	movs	r0, #32
 8000546:	f000 f8cf 	bl	80006e8 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 800054a:	f000 fa5a 	bl	8000a02 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 800054e:	204c      	movs	r0, #76	; 0x4c
 8000550:	f000 f8b5 	bl	80006be <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000554:	f7ff ff16 	bl	8000384 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000558:	f7ff ff1c 	bl	8000394 <NRF24_flush_rx>
	
	NRF24_powerDown();
 800055c:	f000 f9b6 	bl	80008cc <NRF24_powerDown>
	
}
 8000560:	bf00      	nop
 8000562:	3710      	adds	r7, #16
 8000564:	46bd      	mov	sp, r7
 8000566:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800056a:	b002      	add	sp, #8
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	200000c4 	.word	0x200000c4
 8000574:	200000bc 	.word	0x200000bc
 8000578:	200000c0 	.word	0x200000c0
 800057c:	200000c2 	.word	0x200000c2

08000580 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8000584:	2000      	movs	r0, #0
 8000586:	f7ff fe21 	bl	80001cc <NRF24_ce>
	NRF24_flush_tx();
 800058a:	f7ff fefb 	bl	8000384 <NRF24_flush_tx>
	NRF24_flush_rx();
 800058e:	f7ff ff01 	bl	8000394 <NRF24_flush_rx>
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
	...

08000598 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	460b      	mov	r3, r1
 80005a2:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 80005a4:	f000 fa2d 	bl	8000a02 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 80005a8:	78fb      	ldrb	r3, [r7, #3]
 80005aa:	4619      	mov	r1, r3
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	f000 f9cc 	bl	800094a <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 80005b2:	f001 f803 	bl	80015bc <HAL_GetTick>
 80005b6:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 80005b8:	230a      	movs	r3, #10
 80005ba:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 80005bc:	f107 030d 	add.w	r3, r7, #13
 80005c0:	2201      	movs	r2, #1
 80005c2:	4619      	mov	r1, r3
 80005c4:	2008      	movs	r0, #8
 80005c6:	f7ff fe49 	bl	800025c <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 80005ca:	f7ff feeb 	bl	80003a4 <NRF24_get_status>
 80005ce:	4603      	mov	r3, r0
 80005d0:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d107      	bne.n	80005ec <NRF24_write+0x54>
 80005dc:	f000 ffee 	bl	80015bc <HAL_GetTick>
 80005e0:	4602      	mov	r2, r0
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	1ad3      	subs	r3, r2, r3
 80005e6:	693a      	ldr	r2, [r7, #16]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d8e7      	bhi.n	80005bc <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 80005ec:	f107 010b 	add.w	r1, r7, #11
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	4a0c      	ldr	r2, [pc, #48]	; (8000628 <NRF24_write+0x90>)
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 f9d0 	bl	800099c <NRF24_whatHappened>
	retStatus = tx_ok;
 80005fc:	7b3b      	ldrb	r3, [r7, #12]
 80005fe:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <NRF24_write+0x90>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d005      	beq.n	8000614 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8000608:	f000 f884 	bl	8000714 <NRF24_getDynamicPayloadSize>
 800060c:	4603      	mov	r3, r0
 800060e:	461a      	mov	r2, r3
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <NRF24_write+0x94>)
 8000612:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 8000614:	f000 f80c 	bl	8000630 <NRF24_available>
	NRF24_flush_tx();
 8000618:	f7ff feb4 	bl	8000384 <NRF24_flush_tx>
	return retStatus;
 800061c:	7bbb      	ldrb	r3, [r7, #14]
}
 800061e:	4618      	mov	r0, r3
 8000620:	3718      	adds	r7, #24
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	200000b4 	.word	0x200000b4
 800062c:	200000b5 	.word	0x200000b5

08000630 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000634:	2000      	movs	r0, #0
 8000636:	f000 f958 	bl	80008ea <NRF24_availablePipe>
 800063a:	4603      	mov	r3, r0
}
 800063c:	4618      	mov	r0, r3
 800063e:	bd80      	pop	{r7, pc}

08000640 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 800064a:	463b      	mov	r3, r7
 800064c:	2205      	movs	r2, #5
 800064e:	4619      	mov	r1, r3
 8000650:	200a      	movs	r0, #10
 8000652:	f7ff fe4d 	bl	80002f0 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8000656:	463b      	mov	r3, r7
 8000658:	2205      	movs	r2, #5
 800065a:	4619      	mov	r1, r3
 800065c:	2010      	movs	r0, #16
 800065e:	f7ff fe47 	bl	80002f0 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8000662:	2320      	movs	r3, #32
 8000664:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8000666:	4b07      	ldr	r3, [pc, #28]	; (8000684 <NRF24_openWritingPipe+0x44>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	7bfa      	ldrb	r2, [r7, #15]
 800066c:	4293      	cmp	r3, r2
 800066e:	bf28      	it	cs
 8000670:	4613      	movcs	r3, r2
 8000672:	b2db      	uxtb	r3, r3
 8000674:	4619      	mov	r1, r3
 8000676:	2011      	movs	r0, #17
 8000678:	f7ff fe18 	bl	80002ac <NRF24_write_register>
}
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	200000b6 	.word	0x200000b6

08000688 <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	460a      	mov	r2, r1
 8000692:	71fb      	strb	r3, [r7, #7]
 8000694:	4613      	mov	r3, r2
 8000696:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	011b      	lsls	r3, r3, #4
 800069c:	b25a      	sxtb	r2, r3
 800069e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80006a2:	f003 030f 	and.w	r3, r3, #15
 80006a6:	b25b      	sxtb	r3, r3
 80006a8:	4313      	orrs	r3, r2
 80006aa:	b25b      	sxtb	r3, r3
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	4619      	mov	r1, r3
 80006b0:	2004      	movs	r0, #4
 80006b2:	f7ff fdfb 	bl	80002ac <NRF24_write_register>
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	b084      	sub	sp, #16
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	4603      	mov	r3, r0
 80006c6:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 80006c8:	237f      	movs	r3, #127	; 0x7f
 80006ca:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 80006cc:	7bfa      	ldrb	r2, [r7, #15]
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	4293      	cmp	r3, r2
 80006d2:	bf28      	it	cs
 80006d4:	4613      	movcs	r3, r2
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	4619      	mov	r1, r3
 80006da:	2005      	movs	r0, #5
 80006dc:	f7ff fde6 	bl	80002ac <NRF24_write_register>
}
 80006e0:	bf00      	nop
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 80006f2:	2320      	movs	r3, #32
 80006f4:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 80006f6:	7bfa      	ldrb	r2, [r7, #15]
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	4293      	cmp	r3, r2
 80006fc:	bf28      	it	cs
 80006fe:	4613      	movcs	r3, r2
 8000700:	b2da      	uxtb	r2, r3
 8000702:	4b03      	ldr	r3, [pc, #12]	; (8000710 <NRF24_setPayloadSize+0x28>)
 8000704:	701a      	strb	r2, [r3, #0]
}
 8000706:	bf00      	nop
 8000708:	3714      	adds	r7, #20
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr
 8000710:	200000b6 	.word	0x200000b6

08000714 <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000718:	2060      	movs	r0, #96	; 0x60
 800071a:	f7ff fd77 	bl	800020c <NRF24_read_register>
 800071e:	4603      	mov	r3, r0
}
 8000720:	4618      	mov	r0, r3
 8000722:	bd80      	pop	{r7, pc}

08000724 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000728:	201d      	movs	r0, #29
 800072a:	f7ff fd6f 	bl	800020c <NRF24_read_register>
 800072e:	4603      	mov	r3, r0
 8000730:	f023 0304 	bic.w	r3, r3, #4
 8000734:	b2db      	uxtb	r3, r3
 8000736:	4619      	mov	r1, r3
 8000738:	201d      	movs	r0, #29
 800073a:	f7ff fdb7 	bl	80002ac <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 800073e:	2100      	movs	r1, #0
 8000740:	201c      	movs	r0, #28
 8000742:	f7ff fdb3 	bl	80002ac <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000746:	4b02      	ldr	r3, [pc, #8]	; (8000750 <NRF24_disableDynamicPayloads+0x2c>)
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	200000b7 	.word	0x200000b7

08000754 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d004      	beq.n	800076e <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000764:	213f      	movs	r1, #63	; 0x3f
 8000766:	2001      	movs	r0, #1
 8000768:	f7ff fda0 	bl	80002ac <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 800076c:	e003      	b.n	8000776 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 800076e:	2100      	movs	r1, #0
 8000770:	2001      	movs	r0, #1
 8000772:	f7ff fd9b 	bl	80002ac <NRF24_write_register>
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 800077e:	b580      	push	{r7, lr}
 8000780:	b084      	sub	sp, #16
 8000782:	af00      	add	r7, sp, #0
 8000784:	4603      	mov	r3, r0
 8000786:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000788:	2006      	movs	r0, #6
 800078a:	f7ff fd3f 	bl	800020c <NRF24_read_register>
 800078e:	4603      	mov	r3, r0
 8000790:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	f023 0306 	bic.w	r3, r3, #6
 8000798:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	2b03      	cmp	r3, #3
 800079e:	d104      	bne.n	80007aa <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80007a0:	7bfb      	ldrb	r3, [r7, #15]
 80007a2:	f043 0306 	orr.w	r3, r3, #6
 80007a6:	73fb      	strb	r3, [r7, #15]
 80007a8:	e019      	b.n	80007de <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	2b02      	cmp	r3, #2
 80007ae:	d104      	bne.n	80007ba <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
 80007b2:	f043 0304 	orr.w	r3, r3, #4
 80007b6:	73fb      	strb	r3, [r7, #15]
 80007b8:	e011      	b.n	80007de <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d104      	bne.n	80007ca <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
 80007c2:	f043 0302 	orr.w	r3, r3, #2
 80007c6:	73fb      	strb	r3, [r7, #15]
 80007c8:	e009      	b.n	80007de <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d006      	beq.n	80007de <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	2b04      	cmp	r3, #4
 80007d4:	d103      	bne.n	80007de <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80007d6:	7bfb      	ldrb	r3, [r7, #15]
 80007d8:	f043 0306 	orr.w	r3, r3, #6
 80007dc:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 80007de:	7bfb      	ldrb	r3, [r7, #15]
 80007e0:	4619      	mov	r1, r3
 80007e2:	2006      	movs	r0, #6
 80007e4:	f7ff fd62 	bl	80002ac <NRF24_write_register>
}
 80007e8:	bf00      	nop
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 80007fa:	2300      	movs	r3, #0
 80007fc:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80007fe:	2006      	movs	r0, #6
 8000800:	f7ff fd04 	bl	800020c <NRF24_read_register>
 8000804:	4603      	mov	r3, r0
 8000806:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000808:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <NRF24_setDataRate+0x88>)
 800080a:	2200      	movs	r2, #0
 800080c:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 800080e:	7bbb      	ldrb	r3, [r7, #14]
 8000810:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000814:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	2b02      	cmp	r3, #2
 800081a:	d107      	bne.n	800082c <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 800081c:	4b16      	ldr	r3, [pc, #88]	; (8000878 <NRF24_setDataRate+0x88>)
 800081e:	2200      	movs	r2, #0
 8000820:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000822:	7bbb      	ldrb	r3, [r7, #14]
 8000824:	f043 0320 	orr.w	r3, r3, #32
 8000828:	73bb      	strb	r3, [r7, #14]
 800082a:	e00d      	b.n	8000848 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	2b01      	cmp	r3, #1
 8000830:	d107      	bne.n	8000842 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <NRF24_setDataRate+0x88>)
 8000834:	2201      	movs	r2, #1
 8000836:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000838:	7bbb      	ldrb	r3, [r7, #14]
 800083a:	f043 0308 	orr.w	r3, r3, #8
 800083e:	73bb      	strb	r3, [r7, #14]
 8000840:	e002      	b.n	8000848 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000842:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <NRF24_setDataRate+0x88>)
 8000844:	2200      	movs	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000848:	7bbb      	ldrb	r3, [r7, #14]
 800084a:	4619      	mov	r1, r3
 800084c:	2006      	movs	r0, #6
 800084e:	f7ff fd2d 	bl	80002ac <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000852:	2006      	movs	r0, #6
 8000854:	f7ff fcda 	bl	800020c <NRF24_read_register>
 8000858:	4603      	mov	r3, r0
 800085a:	461a      	mov	r2, r3
 800085c:	7bbb      	ldrb	r3, [r7, #14]
 800085e:	4293      	cmp	r3, r2
 8000860:	d102      	bne.n	8000868 <NRF24_setDataRate+0x78>
  {
    result = true;
 8000862:	2301      	movs	r3, #1
 8000864:	73fb      	strb	r3, [r7, #15]
 8000866:	e002      	b.n	800086e <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000868:	4b03      	ldr	r3, [pc, #12]	; (8000878 <NRF24_setDataRate+0x88>)
 800086a:	2200      	movs	r2, #0
 800086c:	701a      	strb	r2, [r3, #0]
  }

  return result;
 800086e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000870:	4618      	mov	r0, r3
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	200000b8 	.word	0x200000b8

0800087c <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000886:	2000      	movs	r0, #0
 8000888:	f7ff fcc0 	bl	800020c <NRF24_read_register>
 800088c:	4603      	mov	r3, r0
 800088e:	f023 030c 	bic.w	r3, r3, #12
 8000892:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d00f      	beq.n	80008ba <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d104      	bne.n	80008aa <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 80008a0:	7bfb      	ldrb	r3, [r7, #15]
 80008a2:	f043 0308 	orr.w	r3, r3, #8
 80008a6:	73fb      	strb	r3, [r7, #15]
 80008a8:	e007      	b.n	80008ba <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 80008aa:	7bfb      	ldrb	r3, [r7, #15]
 80008ac:	f043 0308 	orr.w	r3, r3, #8
 80008b0:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 80008b2:	7bfb      	ldrb	r3, [r7, #15]
 80008b4:	f043 0304 	orr.w	r3, r3, #4
 80008b8:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
 80008bc:	4619      	mov	r1, r3
 80008be:	2000      	movs	r0, #0
 80008c0:	f7ff fcf4 	bl	80002ac <NRF24_write_register>
}
 80008c4:	bf00      	nop
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 80008d0:	2000      	movs	r0, #0
 80008d2:	f7ff fc9b 	bl	800020c <NRF24_read_register>
 80008d6:	4603      	mov	r3, r0
 80008d8:	f023 0302 	bic.w	r3, r3, #2
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	4619      	mov	r1, r3
 80008e0:	2000      	movs	r0, #0
 80008e2:	f7ff fce3 	bl	80002ac <NRF24_write_register>
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}

080008ea <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b084      	sub	sp, #16
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 80008f2:	f7ff fd57 	bl	80003a4 <NRF24_get_status>
 80008f6:	4603      	mov	r3, r0
 80008f8:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 80008fa:	7bfb      	ldrb	r3, [r7, #15]
 80008fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000900:	2b00      	cmp	r3, #0
 8000902:	bf14      	ite	ne
 8000904:	2301      	movne	r3, #1
 8000906:	2300      	moveq	r3, #0
 8000908:	73bb      	strb	r3, [r7, #14]

  if (result)
 800090a:	7bbb      	ldrb	r3, [r7, #14]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d017      	beq.n	8000940 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d007      	beq.n	8000926 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8000916:	7bfb      	ldrb	r3, [r7, #15]
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	b2db      	uxtb	r3, r3
 800091c:	f003 0307 	and.w	r3, r3, #7
 8000920:	b2da      	uxtb	r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8000926:	2140      	movs	r1, #64	; 0x40
 8000928:	2007      	movs	r0, #7
 800092a:	f7ff fcbf 	bl	80002ac <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 800092e:	7bfb      	ldrb	r3, [r7, #15]
 8000930:	f003 0320 	and.w	r3, r3, #32
 8000934:	2b00      	cmp	r3, #0
 8000936:	d003      	beq.n	8000940 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8000938:	2120      	movs	r1, #32
 800093a:	2007      	movs	r0, #7
 800093c:	f7ff fcb6 	bl	80002ac <NRF24_write_register>
    }
  }
  return result;
 8000940:	7bbb      	ldrb	r3, [r7, #14]
}
 8000942:	4618      	mov	r0, r3
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b082      	sub	sp, #8
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
 8000952:	460b      	mov	r3, r1
 8000954:	70fb      	strb	r3, [r7, #3]
	// Transmitter power-up
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8000956:	2000      	movs	r0, #0
 8000958:	f7ff fc58 	bl	800020c <NRF24_read_register>
 800095c:	4603      	mov	r3, r0
 800095e:	f043 0302 	orr.w	r3, r3, #2
 8000962:	b2db      	uxtb	r3, r3
 8000964:	f023 0301 	bic.w	r3, r3, #1
 8000968:	b2db      	uxtb	r3, r3
 800096a:	4619      	mov	r1, r3
 800096c:	2000      	movs	r0, #0
 800096e:	f7ff fc9d 	bl	80002ac <NRF24_write_register>
  NRF24_DelayMicroSeconds(150);
 8000972:	2096      	movs	r0, #150	; 0x96
 8000974:	f7ff fbea 	bl	800014c <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8000978:	78fb      	ldrb	r3, [r7, #3]
 800097a:	4619      	mov	r1, r3
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f7ff fcdf 	bl	8000340 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8000982:	2001      	movs	r0, #1
 8000984:	f7ff fc22 	bl	80001cc <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8000988:	200f      	movs	r0, #15
 800098a:	f7ff fbdf 	bl	800014c <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 800098e:	2000      	movs	r0, #0
 8000990:	f7ff fc1c 	bl	80001cc <NRF24_ce>
}
 8000994:	bf00      	nop
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 80009a8:	f7ff fcfc 	bl	80003a4 <NRF24_get_status>
 80009ac:	4603      	mov	r3, r0
 80009ae:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	2200      	movs	r2, #0
 80009b4:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80009b6:	2170      	movs	r1, #112	; 0x70
 80009b8:	2007      	movs	r0, #7
 80009ba:	f7ff fc77 	bl	80002ac <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 80009be:	7dfb      	ldrb	r3, [r7, #23]
 80009c0:	f003 0320 	and.w	r3, r3, #32
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	bf14      	ite	ne
 80009c8:	2301      	movne	r3, #1
 80009ca:	2300      	moveq	r3, #0
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 80009d2:	7dfb      	ldrb	r3, [r7, #23]
 80009d4:	f003 0310 	and.w	r3, r3, #16
 80009d8:	2b00      	cmp	r3, #0
 80009da:	bf14      	ite	ne
 80009dc:	2301      	movne	r3, #1
 80009de:	2300      	moveq	r3, #0
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 80009e6:	7dfb      	ldrb	r3, [r7, #23]
 80009e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	bf14      	ite	ne
 80009f0:	2301      	movne	r3, #1
 80009f2:	2300      	moveq	r3, #0
 80009f4:	b2da      	uxtb	r2, r3
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	701a      	strb	r2, [r3, #0]
}
 80009fa:	bf00      	nop
 80009fc:	3718      	adds	r7, #24
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000a06:	2170      	movs	r1, #112	; 0x70
 8000a08:	2007      	movs	r0, #7
 8000a0a:	f7ff fc4f 	bl	80002ac <NRF24_write_register>
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f7ff fbb6 	bl	800018c <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000a20:	2350      	movs	r3, #80	; 0x50
 8000a22:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8000a24:	2373      	movs	r3, #115	; 0x73
 8000a26:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000a28:	1d39      	adds	r1, r7, #4
 8000a2a:	2364      	movs	r3, #100	; 0x64
 8000a2c:	2202      	movs	r2, #2
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <NRF24_ACTIVATE_cmd+0x30>)
 8000a30:	f001 fc91 	bl	8002356 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8000a34:	2001      	movs	r0, #1
 8000a36:	f7ff fba9 	bl	800018c <NRF24_csn>
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200000c4 	.word	0x200000c4

08000a48 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8000a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a4a:	b0a1      	sub	sp, #132	; 0x84
 8000a4c:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
//	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
//	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f7ff fbdc 	bl	800020c <NRF24_read_register>
 8000a54:	4603      	mov	r3, r0
 8000a56:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8000a5a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000a5e:	f003 0308 	and.w	r3, r3, #8
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d020      	beq.n	8000aa8 <printRadioSettings+0x60>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8000a66:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000a6a:	f003 0304 	and.w	r3, r3, #4
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d00b      	beq.n	8000a8a <printRadioSettings+0x42>
 8000a72:	f107 0308 	add.w	r3, r7, #8
 8000a76:	4aa1      	ldr	r2, [pc, #644]	; (8000cfc <printRadioSettings+0x2b4>)
 8000a78:	461c      	mov	r4, r3
 8000a7a:	4615      	mov	r5, r2
 8000a7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a80:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000a88:	e017      	b.n	8000aba <printRadioSettings+0x72>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8000a8a:	f107 0308 	add.w	r3, r7, #8
 8000a8e:	4a9c      	ldr	r2, [pc, #624]	; (8000d00 <printRadioSettings+0x2b8>)
 8000a90:	461c      	mov	r4, r3
 8000a92:	4615      	mov	r5, r2
 8000a94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a98:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a9c:	c403      	stmia	r4!, {r0, r1}
 8000a9e:	8022      	strh	r2, [r4, #0]
 8000aa0:	3402      	adds	r4, #2
 8000aa2:	0c13      	lsrs	r3, r2, #16
 8000aa4:	7023      	strb	r3, [r4, #0]
 8000aa6:	e008      	b.n	8000aba <printRadioSettings+0x72>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8000aa8:	f107 0308 	add.w	r3, r7, #8
 8000aac:	4a95      	ldr	r2, [pc, #596]	; (8000d04 <printRadioSettings+0x2bc>)
 8000aae:	461c      	mov	r4, r3
 8000ab0:	4615      	mov	r5, r2
 8000ab2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ab4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ab6:	682b      	ldr	r3, [r5, #0]
 8000ab8:	6023      	str	r3, [r4, #0]
	}
//	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8000aba:	2001      	movs	r0, #1
 8000abc:	f7ff fba6 	bl	800020c <NRF24_read_register>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000ac6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000aca:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	bfcc      	ite	gt
 8000ad2:	2301      	movgt	r3, #1
 8000ad4:	2300      	movle	r3, #0
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000ada:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ade:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	bfcc      	ite	gt
 8000ae6:	2301      	movgt	r3, #1
 8000ae8:	2300      	movle	r3, #0
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000aee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000af2:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	bfcc      	ite	gt
 8000afa:	2301      	movgt	r3, #1
 8000afc:	2300      	movle	r3, #0
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000b02:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000b06:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	bfcc      	ite	gt
 8000b0e:	2301      	movgt	r3, #1
 8000b10:	2300      	movle	r3, #0
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000b16:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000b1a:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	bfcc      	ite	gt
 8000b22:	2301      	movgt	r3, #1
 8000b24:	2300      	movle	r3, #0
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000b2a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000b2e:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	bfcc      	ite	gt
 8000b36:	2301      	movgt	r3, #1
 8000b38:	2300      	movle	r3, #0
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	f107 0008 	add.w	r0, r7, #8
 8000b40:	9303      	str	r3, [sp, #12]
 8000b42:	9402      	str	r4, [sp, #8]
 8000b44:	9101      	str	r1, [sp, #4]
 8000b46:	9200      	str	r2, [sp, #0]
 8000b48:	4633      	mov	r3, r6
 8000b4a:	462a      	mov	r2, r5
 8000b4c:	496e      	ldr	r1, [pc, #440]	; (8000d08 <printRadioSettings+0x2c0>)
 8000b4e:	f002 f8f9 	bl	8002d44 <siprintf>
//	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8000b52:	2002      	movs	r0, #2
 8000b54:	f7ff fb5a 	bl	800020c <NRF24_read_register>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000b5e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000b62:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	bfcc      	ite	gt
 8000b6a:	2301      	movgt	r3, #1
 8000b6c:	2300      	movle	r3, #0
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000b72:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000b76:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	bfcc      	ite	gt
 8000b7e:	2301      	movgt	r3, #1
 8000b80:	2300      	movle	r3, #0
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000b86:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000b8a:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	bfcc      	ite	gt
 8000b92:	2301      	movgt	r3, #1
 8000b94:	2300      	movle	r3, #0
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000b9a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000b9e:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	bfcc      	ite	gt
 8000ba6:	2301      	movgt	r3, #1
 8000ba8:	2300      	movle	r3, #0
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000bae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000bb2:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	bfcc      	ite	gt
 8000bba:	2301      	movgt	r3, #1
 8000bbc:	2300      	movle	r3, #0
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000bc2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000bc6:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	bfcc      	ite	gt
 8000bce:	2301      	movgt	r3, #1
 8000bd0:	2300      	movle	r3, #0
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	f107 0008 	add.w	r0, r7, #8
 8000bd8:	9303      	str	r3, [sp, #12]
 8000bda:	9402      	str	r4, [sp, #8]
 8000bdc:	9101      	str	r1, [sp, #4]
 8000bde:	9200      	str	r2, [sp, #0]
 8000be0:	4633      	mov	r3, r6
 8000be2:	462a      	mov	r2, r5
 8000be4:	4949      	ldr	r1, [pc, #292]	; (8000d0c <printRadioSettings+0x2c4>)
 8000be6:	f002 f8ad 	bl	8002d44 <siprintf>
//	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8000bea:	2003      	movs	r0, #3
 8000bec:	f7ff fb0e 	bl	800020c <NRF24_read_register>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	f003 0303 	and.w	r3, r3, #3
 8000bf6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8000bfa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000bfe:	3302      	adds	r3, #2
 8000c00:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8000c04:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000c08:	f107 0308 	add.w	r3, r7, #8
 8000c0c:	4940      	ldr	r1, [pc, #256]	; (8000d10 <printRadioSettings+0x2c8>)
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f002 f898 	bl	8002d44 <siprintf>
//	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8000c14:	2005      	movs	r0, #5
 8000c16:	f7ff faf9 	bl	800020c <NRF24_read_register>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8000c20:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000c28:	f107 0308 	add.w	r3, r7, #8
 8000c2c:	4939      	ldr	r1, [pc, #228]	; (8000d14 <printRadioSettings+0x2cc>)
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f002 f888 	bl	8002d44 <siprintf>
//	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8000c34:	2006      	movs	r0, #6
 8000c36:	f7ff fae9 	bl	800020c <NRF24_read_register>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8000c40:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c44:	f003 0308 	and.w	r3, r3, #8
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d00f      	beq.n	8000c6c <printRadioSettings+0x224>
 8000c4c:	f107 0308 	add.w	r3, r7, #8
 8000c50:	4a31      	ldr	r2, [pc, #196]	; (8000d18 <printRadioSettings+0x2d0>)
 8000c52:	461c      	mov	r4, r3
 8000c54:	4615      	mov	r5, r2
 8000c56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c5a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c5e:	6020      	str	r0, [r4, #0]
 8000c60:	3404      	adds	r4, #4
 8000c62:	8021      	strh	r1, [r4, #0]
 8000c64:	3402      	adds	r4, #2
 8000c66:	0c0b      	lsrs	r3, r1, #16
 8000c68:	7023      	strb	r3, [r4, #0]
 8000c6a:	e00e      	b.n	8000c8a <printRadioSettings+0x242>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8000c6c:	f107 0308 	add.w	r3, r7, #8
 8000c70:	4a2a      	ldr	r2, [pc, #168]	; (8000d1c <printRadioSettings+0x2d4>)
 8000c72:	461c      	mov	r4, r3
 8000c74:	4615      	mov	r5, r2
 8000c76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c7a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c7e:	6020      	str	r0, [r4, #0]
 8000c80:	3404      	adds	r4, #4
 8000c82:	8021      	strh	r1, [r4, #0]
 8000c84:	3402      	adds	r4, #2
 8000c86:	0c0b      	lsrs	r3, r1, #16
 8000c88:	7023      	strb	r3, [r4, #0]
//	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	reg8Val &= (3 << 1);
 8000c8a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c8e:	f003 0306 	and.w	r3, r3, #6
 8000c92:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8000c96:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c9a:	085b      	lsrs	r3, r3, #1
 8000c9c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8000ca0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d109      	bne.n	8000cbc <printRadioSettings+0x274>
 8000ca8:	f107 0308 	add.w	r3, r7, #8
 8000cac:	4a1c      	ldr	r2, [pc, #112]	; (8000d20 <printRadioSettings+0x2d8>)
 8000cae:	461c      	mov	r4, r3
 8000cb0:	4615      	mov	r5, r2
 8000cb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cb6:	682b      	ldr	r3, [r5, #0]
 8000cb8:	6023      	str	r3, [r4, #0]
 8000cba:	e044      	b.n	8000d46 <printRadioSettings+0x2fe>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8000cbc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d109      	bne.n	8000cd8 <printRadioSettings+0x290>
 8000cc4:	f107 0308 	add.w	r3, r7, #8
 8000cc8:	4a16      	ldr	r2, [pc, #88]	; (8000d24 <printRadioSettings+0x2dc>)
 8000cca:	461c      	mov	r4, r3
 8000ccc:	4615      	mov	r5, r2
 8000cce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cd2:	682b      	ldr	r3, [r5, #0]
 8000cd4:	6023      	str	r3, [r4, #0]
 8000cd6:	e036      	b.n	8000d46 <printRadioSettings+0x2fe>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8000cd8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d125      	bne.n	8000d2c <printRadioSettings+0x2e4>
 8000ce0:	f107 0308 	add.w	r3, r7, #8
 8000ce4:	4a10      	ldr	r2, [pc, #64]	; (8000d28 <printRadioSettings+0x2e0>)
 8000ce6:	461c      	mov	r4, r3
 8000ce8:	4615      	mov	r5, r2
 8000cea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cee:	682b      	ldr	r3, [r5, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	8022      	strh	r2, [r4, #0]
 8000cf4:	3402      	adds	r4, #2
 8000cf6:	0c1b      	lsrs	r3, r3, #16
 8000cf8:	7023      	strb	r3, [r4, #0]
 8000cfa:	e024      	b.n	8000d46 <printRadioSettings+0x2fe>
 8000cfc:	0800356c 	.word	0x0800356c
 8000d00:	08003588 	.word	0x08003588
 8000d04:	080035a4 	.word	0x080035a4
 8000d08:	080035b8 	.word	0x080035b8
 8000d0c:	080035fc 	.word	0x080035fc
 8000d10:	08003648 	.word	0x08003648
 8000d14:	08003664 	.word	0x08003664
 8000d18:	08003678 	.word	0x08003678
 8000d1c:	08003690 	.word	0x08003690
 8000d20:	080036a8 	.word	0x080036a8
 8000d24:	080036bc 	.word	0x080036bc
 8000d28:	080036d0 	.word	0x080036d0
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8000d2c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d30:	2b03      	cmp	r3, #3
 8000d32:	d108      	bne.n	8000d46 <printRadioSettings+0x2fe>
 8000d34:	f107 0308 	add.w	r3, r7, #8
 8000d38:	4ac6      	ldr	r2, [pc, #792]	; (8001054 <printRadioSettings+0x60c>)
 8000d3a:	461c      	mov	r4, r3
 8000d3c:	4615      	mov	r5, r2
 8000d3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d42:	682b      	ldr	r3, [r5, #0]
 8000d44:	8023      	strh	r3, [r4, #0]
//	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8000d46:	463b      	mov	r3, r7
 8000d48:	2205      	movs	r2, #5
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	200a      	movs	r0, #10
 8000d4e:	f7ff fa85 	bl	800025c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8000d52:	793b      	ldrb	r3, [r7, #4]
 8000d54:	461c      	mov	r4, r3
 8000d56:	78fb      	ldrb	r3, [r7, #3]
 8000d58:	461d      	mov	r5, r3
 8000d5a:	78bb      	ldrb	r3, [r7, #2]
 8000d5c:	787a      	ldrb	r2, [r7, #1]
 8000d5e:	7839      	ldrb	r1, [r7, #0]
 8000d60:	f107 0008 	add.w	r0, r7, #8
 8000d64:	9102      	str	r1, [sp, #8]
 8000d66:	9201      	str	r2, [sp, #4]
 8000d68:	9300      	str	r3, [sp, #0]
 8000d6a:	462b      	mov	r3, r5
 8000d6c:	4622      	mov	r2, r4
 8000d6e:	49ba      	ldr	r1, [pc, #744]	; (8001058 <printRadioSettings+0x610>)
 8000d70:	f001 ffe8 	bl	8002d44 <siprintf>
//	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8000d74:	463b      	mov	r3, r7
 8000d76:	2205      	movs	r2, #5
 8000d78:	4619      	mov	r1, r3
 8000d7a:	200b      	movs	r0, #11
 8000d7c:	f7ff fa6e 	bl	800025c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8000d80:	793b      	ldrb	r3, [r7, #4]
 8000d82:	461c      	mov	r4, r3
 8000d84:	78fb      	ldrb	r3, [r7, #3]
 8000d86:	461d      	mov	r5, r3
 8000d88:	78bb      	ldrb	r3, [r7, #2]
 8000d8a:	787a      	ldrb	r2, [r7, #1]
 8000d8c:	7839      	ldrb	r1, [r7, #0]
 8000d8e:	f107 0008 	add.w	r0, r7, #8
 8000d92:	9102      	str	r1, [sp, #8]
 8000d94:	9201      	str	r2, [sp, #4]
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	462b      	mov	r3, r5
 8000d9a:	4622      	mov	r2, r4
 8000d9c:	49af      	ldr	r1, [pc, #700]	; (800105c <printRadioSettings+0x614>)
 8000d9e:	f001 ffd1 	bl	8002d44 <siprintf>
//	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8000da2:	463b      	mov	r3, r7
 8000da4:	2201      	movs	r2, #1
 8000da6:	4619      	mov	r1, r3
 8000da8:	200c      	movs	r0, #12
 8000daa:	f7ff fa57 	bl	800025c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8000dae:	783b      	ldrb	r3, [r7, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	f107 0308 	add.w	r3, r7, #8
 8000db6:	49aa      	ldr	r1, [pc, #680]	; (8001060 <printRadioSettings+0x618>)
 8000db8:	4618      	mov	r0, r3
 8000dba:	f001 ffc3 	bl	8002d44 <siprintf>
//	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8000dbe:	463b      	mov	r3, r7
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	200d      	movs	r0, #13
 8000dc6:	f7ff fa49 	bl	800025c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8000dca:	783b      	ldrb	r3, [r7, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	f107 0308 	add.w	r3, r7, #8
 8000dd2:	49a4      	ldr	r1, [pc, #656]	; (8001064 <printRadioSettings+0x61c>)
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f001 ffb5 	bl	8002d44 <siprintf>
//	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8000dda:	463b      	mov	r3, r7
 8000ddc:	2201      	movs	r2, #1
 8000dde:	4619      	mov	r1, r3
 8000de0:	200e      	movs	r0, #14
 8000de2:	f7ff fa3b 	bl	800025c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8000de6:	783b      	ldrb	r3, [r7, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	f107 0308 	add.w	r3, r7, #8
 8000dee:	499e      	ldr	r1, [pc, #632]	; (8001068 <printRadioSettings+0x620>)
 8000df0:	4618      	mov	r0, r3
 8000df2:	f001 ffa7 	bl	8002d44 <siprintf>
//	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8000df6:	463b      	mov	r3, r7
 8000df8:	2201      	movs	r2, #1
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	200f      	movs	r0, #15
 8000dfe:	f7ff fa2d 	bl	800025c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8000e02:	783b      	ldrb	r3, [r7, #0]
 8000e04:	461a      	mov	r2, r3
 8000e06:	f107 0308 	add.w	r3, r7, #8
 8000e0a:	4998      	ldr	r1, [pc, #608]	; (800106c <printRadioSettings+0x624>)
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f001 ff99 	bl	8002d44 <siprintf>
//	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8000e12:	463b      	mov	r3, r7
 8000e14:	2205      	movs	r2, #5
 8000e16:	4619      	mov	r1, r3
 8000e18:	2010      	movs	r0, #16
 8000e1a:	f7ff fa1f 	bl	800025c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8000e1e:	793b      	ldrb	r3, [r7, #4]
 8000e20:	461c      	mov	r4, r3
 8000e22:	78fb      	ldrb	r3, [r7, #3]
 8000e24:	461d      	mov	r5, r3
 8000e26:	78bb      	ldrb	r3, [r7, #2]
 8000e28:	787a      	ldrb	r2, [r7, #1]
 8000e2a:	7839      	ldrb	r1, [r7, #0]
 8000e2c:	f107 0008 	add.w	r0, r7, #8
 8000e30:	9102      	str	r1, [sp, #8]
 8000e32:	9201      	str	r2, [sp, #4]
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	462b      	mov	r3, r5
 8000e38:	4622      	mov	r2, r4
 8000e3a:	498d      	ldr	r1, [pc, #564]	; (8001070 <printRadioSettings+0x628>)
 8000e3c:	f001 ff82 	bl	8002d44 <siprintf>
//	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8000e40:	2011      	movs	r0, #17
 8000e42:	f7ff f9e3 	bl	800020c <NRF24_read_register>
 8000e46:	4603      	mov	r3, r0
 8000e48:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8000e4c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e50:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000e54:	f107 0308 	add.w	r3, r7, #8
 8000e58:	4986      	ldr	r1, [pc, #536]	; (8001074 <printRadioSettings+0x62c>)
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f001 ff72 	bl	8002d44 <siprintf>
//	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	
	reg8Val = NRF24_read_register(0x11+1);
 8000e60:	2012      	movs	r0, #18
 8000e62:	f7ff f9d3 	bl	800020c <NRF24_read_register>
 8000e66:	4603      	mov	r3, r0
 8000e68:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8000e6c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e70:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000e74:	f107 0308 	add.w	r3, r7, #8
 8000e78:	497f      	ldr	r1, [pc, #508]	; (8001078 <printRadioSettings+0x630>)
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f001 ff62 	bl	8002d44 <siprintf>
//	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	
	reg8Val = NRF24_read_register(0x11+2);
 8000e80:	2013      	movs	r0, #19
 8000e82:	f7ff f9c3 	bl	800020c <NRF24_read_register>
 8000e86:	4603      	mov	r3, r0
 8000e88:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8000e8c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e90:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000e94:	f107 0308 	add.w	r3, r7, #8
 8000e98:	4978      	ldr	r1, [pc, #480]	; (800107c <printRadioSettings+0x634>)
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f001 ff52 	bl	8002d44 <siprintf>
//	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	
	reg8Val = NRF24_read_register(0x11+3);
 8000ea0:	2014      	movs	r0, #20
 8000ea2:	f7ff f9b3 	bl	800020c <NRF24_read_register>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8000eac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000eb0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000eb4:	f107 0308 	add.w	r3, r7, #8
 8000eb8:	4971      	ldr	r1, [pc, #452]	; (8001080 <printRadioSettings+0x638>)
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f001 ff42 	bl	8002d44 <siprintf>
//	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	
	reg8Val = NRF24_read_register(0x11+4);
 8000ec0:	2015      	movs	r0, #21
 8000ec2:	f7ff f9a3 	bl	800020c <NRF24_read_register>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8000ecc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ed0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000ed4:	f107 0308 	add.w	r3, r7, #8
 8000ed8:	496a      	ldr	r1, [pc, #424]	; (8001084 <printRadioSettings+0x63c>)
 8000eda:	4618      	mov	r0, r3
 8000edc:	f001 ff32 	bl	8002d44 <siprintf>
//	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	
	reg8Val = NRF24_read_register(0x11+5);
 8000ee0:	2016      	movs	r0, #22
 8000ee2:	f7ff f993 	bl	800020c <NRF24_read_register>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8000eec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ef0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000ef4:	f107 0308 	add.w	r3, r7, #8
 8000ef8:	4963      	ldr	r1, [pc, #396]	; (8001088 <printRadioSettings+0x640>)
 8000efa:	4618      	mov	r0, r3
 8000efc:	f001 ff22 	bl	8002d44 <siprintf>
//	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8000f00:	201c      	movs	r0, #28
 8000f02:	f7ff f983 	bl	800020c <NRF24_read_register>
 8000f06:	4603      	mov	r3, r0
 8000f08:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f0c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f10:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	bfcc      	ite	gt
 8000f18:	2301      	movgt	r3, #1
 8000f1a:	2300      	movle	r3, #0
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f20:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f24:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	bfcc      	ite	gt
 8000f2c:	2301      	movgt	r3, #1
 8000f2e:	2300      	movle	r3, #0
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f34:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f38:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	bfcc      	ite	gt
 8000f40:	2301      	movgt	r3, #1
 8000f42:	2300      	movle	r3, #0
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f48:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f4c:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	bfcc      	ite	gt
 8000f54:	2301      	movgt	r3, #1
 8000f56:	2300      	movle	r3, #0
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f5c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f60:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	bfcc      	ite	gt
 8000f68:	2301      	movgt	r3, #1
 8000f6a:	2300      	movle	r3, #0
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f70:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f74:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	bfcc      	ite	gt
 8000f7c:	2301      	movgt	r3, #1
 8000f7e:	2300      	movle	r3, #0
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	f107 0008 	add.w	r0, r7, #8
 8000f86:	9303      	str	r3, [sp, #12]
 8000f88:	9402      	str	r4, [sp, #8]
 8000f8a:	9101      	str	r1, [sp, #4]
 8000f8c:	9200      	str	r2, [sp, #0]
 8000f8e:	4633      	mov	r3, r6
 8000f90:	462a      	mov	r2, r5
 8000f92:	493e      	ldr	r1, [pc, #248]	; (800108c <printRadioSettings+0x644>)
 8000f94:	f001 fed6 	bl	8002d44 <siprintf>
//	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8000f98:	201d      	movs	r0, #29
 8000f9a:	f7ff f937 	bl	800020c <NRF24_read_register>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8000fa4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fa8:	f003 0304 	and.w	r3, r3, #4
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d00c      	beq.n	8000fca <printRadioSettings+0x582>
 8000fb0:	f107 0308 	add.w	r3, r7, #8
 8000fb4:	4a36      	ldr	r2, [pc, #216]	; (8001090 <printRadioSettings+0x648>)
 8000fb6:	461c      	mov	r4, r3
 8000fb8:	4615      	mov	r5, r2
 8000fba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fbe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fc2:	6020      	str	r0, [r4, #0]
 8000fc4:	3404      	adds	r4, #4
 8000fc6:	8021      	strh	r1, [r4, #0]
 8000fc8:	e00e      	b.n	8000fe8 <printRadioSettings+0x5a0>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8000fca:	f107 0308 	add.w	r3, r7, #8
 8000fce:	4a31      	ldr	r2, [pc, #196]	; (8001094 <printRadioSettings+0x64c>)
 8000fd0:	461c      	mov	r4, r3
 8000fd2:	4615      	mov	r5, r2
 8000fd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fd8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fdc:	6020      	str	r0, [r4, #0]
 8000fde:	3404      	adds	r4, #4
 8000fe0:	8021      	strh	r1, [r4, #0]
 8000fe2:	3402      	adds	r4, #2
 8000fe4:	0c0b      	lsrs	r3, r1, #16
 8000fe6:	7023      	strb	r3, [r4, #0]
//	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8000fe8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fec:	f003 0302 	and.w	r3, r3, #2
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d00b      	beq.n	800100c <printRadioSettings+0x5c4>
 8000ff4:	f107 0308 	add.w	r3, r7, #8
 8000ff8:	4a27      	ldr	r2, [pc, #156]	; (8001098 <printRadioSettings+0x650>)
 8000ffa:	461c      	mov	r4, r3
 8000ffc:	4615      	mov	r5, r2
 8000ffe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001000:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001002:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001006:	c403      	stmia	r4!, {r0, r1}
 8001008:	8022      	strh	r2, [r4, #0]
 800100a:	e00d      	b.n	8001028 <printRadioSettings+0x5e0>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 800100c:	f107 0308 	add.w	r3, r7, #8
 8001010:	4a22      	ldr	r2, [pc, #136]	; (800109c <printRadioSettings+0x654>)
 8001012:	461c      	mov	r4, r3
 8001014:	4615      	mov	r5, r2
 8001016:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001018:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800101a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800101e:	c403      	stmia	r4!, {r0, r1}
 8001020:	8022      	strh	r2, [r4, #0]
 8001022:	3402      	adds	r4, #2
 8001024:	0c13      	lsrs	r3, r2, #16
 8001026:	7023      	strb	r3, [r4, #0]
//	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001028:	f107 0308 	add.w	r3, r7, #8
 800102c:	4a1c      	ldr	r2, [pc, #112]	; (80010a0 <printRadioSettings+0x658>)
 800102e:	461c      	mov	r4, r3
 8001030:	4615      	mov	r5, r2
 8001032:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001034:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001036:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001038:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800103a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800103c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800103e:	682b      	ldr	r3, [r5, #0]
 8001040:	461a      	mov	r2, r3
 8001042:	8022      	strh	r2, [r4, #0]
 8001044:	3402      	adds	r4, #2
 8001046:	0c1b      	lsrs	r3, r3, #16
 8001048:	7023      	strb	r3, [r4, #0]
//	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}
 800104a:	bf00      	nop
 800104c:	3774      	adds	r7, #116	; 0x74
 800104e:	46bd      	mov	sp, r7
 8001050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001052:	bf00      	nop
 8001054:	080036e4 	.word	0x080036e4
 8001058:	080036f8 	.word	0x080036f8
 800105c:	08003728 	.word	0x08003728
 8001060:	08003758 	.word	0x08003758
 8001064:	08003780 	.word	0x08003780
 8001068:	080037a8 	.word	0x080037a8
 800106c:	080037d0 	.word	0x080037d0
 8001070:	080037f8 	.word	0x080037f8
 8001074:	08003824 	.word	0x08003824
 8001078:	08003840 	.word	0x08003840
 800107c:	0800385c 	.word	0x0800385c
 8001080:	08003878 	.word	0x08003878
 8001084:	08003894 	.word	0x08003894
 8001088:	080038b0 	.word	0x080038b0
 800108c:	080038cc 	.word	0x080038cc
 8001090:	08003918 	.word	0x08003918
 8001094:	08003930 	.word	0x08003930
 8001098:	08003948 	.word	0x08003948
 800109c:	08003964 	.word	0x08003964
 80010a0:	08003980 	.word	0x08003980

080010a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a4:	b590      	push	{r4, r7, lr}
 80010a6:	b097      	sub	sp, #92	; 0x5c
 80010a8:	af16      	add	r7, sp, #88	; 0x58
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010aa:	f000 fa2f 	bl	800150c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ae:	f000 f833 	bl	8001118 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b2:	f000 f8ad 	bl	8001210 <MX_GPIO_Init>
  MX_SPI1_Init();
 80010b6:	f000 f875 	bl	80011a4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  ////////////////////**** TRANSMISSOR ****//////////////////////////

  	NRF24_begin(CEpin_GPIO_Port,CSNpin_Pin,CEpin_Pin,hspi1);
 80010ba:	4c13      	ldr	r4, [pc, #76]	; (8001108 <main+0x64>)
 80010bc:	4668      	mov	r0, sp
 80010be:	1d23      	adds	r3, r4, #4
 80010c0:	2254      	movs	r2, #84	; 0x54
 80010c2:	4619      	mov	r1, r3
 80010c4:	f001 fe2a 	bl	8002d1c <memcpy>
 80010c8:	6823      	ldr	r3, [r4, #0]
 80010ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010d2:	480e      	ldr	r0, [pc, #56]	; (800110c <main+0x68>)
 80010d4:	f7ff f974 	bl	80003c0 <NRF24_begin>
    printRadioSettings();
 80010d8:	f7ff fcb6 	bl	8000a48 <printRadioSettings>
    NRF24_stopListening();
 80010dc:	f7ff fa50 	bl	8000580 <NRF24_stopListening>
    NRF24_openWritingPipe(TxpipeAddrs);
 80010e0:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <main+0x6c>)
 80010e2:	cb18      	ldmia	r3, {r3, r4}
 80010e4:	4618      	mov	r0, r3
 80010e6:	4621      	mov	r1, r4
 80010e8:	f7ff faaa 	bl	8000640 <NRF24_openWritingPipe>
    NRF24_setAutoAck(false);      //Ativar para o caso de reconhecimento
 80010ec:	2000      	movs	r0, #0
 80010ee:	f7ff fb31 	bl	8000754 <NRF24_setAutoAck>
    NRF24_setChannel(52);         //Deve ser o mesmo do receptor
 80010f2:	2034      	movs	r0, #52	; 0x34
 80010f4:	f7ff fae3 	bl	80006be <NRF24_setChannel>
    NRF24_setPayloadSize(32);
 80010f8:	2020      	movs	r0, #32
 80010fa:	f7ff faf5 	bl	80006e8 <NRF24_setPayloadSize>
  while (1)
  {
	  /////////////////////////////////////////////////////////////////
	  /////////////////////////// RADIO ///////////////////////////////
	  /////////////////////////////////////////////////////////////////
	  if(NRF24_write(myTxData, 32)) //envia dados para receptor
 80010fe:	2120      	movs	r1, #32
 8001100:	4804      	ldr	r0, [pc, #16]	; (8001114 <main+0x70>)
 8001102:	f7ff fa49 	bl	8000598 <NRF24_write>
 8001106:	e7fa      	b.n	80010fe <main+0x5a>
 8001108:	20000128 	.word	0x20000128
 800110c:	40010c00 	.word	0x40010c00
 8001110:	20000000 	.word	0x20000000
 8001114:	20000008 	.word	0x20000008

08001118 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b090      	sub	sp, #64	; 0x40
 800111c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111e:	f107 0318 	add.w	r3, r7, #24
 8001122:	2228      	movs	r2, #40	; 0x28
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f001 fe03 	bl	8002d32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800113a:	2301      	movs	r3, #1
 800113c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800113e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001142:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001144:	2300      	movs	r3, #0
 8001146:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001148:	2301      	movs	r3, #1
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800114c:	2302      	movs	r3, #2
 800114e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001150:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001154:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001156:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800115a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800115c:	f107 0318 	add.w	r3, r7, #24
 8001160:	4618      	mov	r0, r3
 8001162:	f000 fcad 	bl	8001ac0 <HAL_RCC_OscConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800116c:	f000 f89c 	bl	80012a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001170:	230f      	movs	r3, #15
 8001172:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001174:	2302      	movs	r3, #2
 8001176:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800117c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001180:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	2102      	movs	r1, #2
 800118a:	4618      	mov	r0, r3
 800118c:	f000 ff18 	bl	8001fc0 <HAL_RCC_ClockConfig>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001196:	f000 f887 	bl	80012a8 <Error_Handler>
  }
}
 800119a:	bf00      	nop
 800119c:	3740      	adds	r7, #64	; 0x40
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011a8:	4b17      	ldr	r3, [pc, #92]	; (8001208 <MX_SPI1_Init+0x64>)
 80011aa:	4a18      	ldr	r2, [pc, #96]	; (800120c <MX_SPI1_Init+0x68>)
 80011ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011ae:	4b16      	ldr	r3, [pc, #88]	; (8001208 <MX_SPI1_Init+0x64>)
 80011b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011b6:	4b14      	ldr	r3, [pc, #80]	; (8001208 <MX_SPI1_Init+0x64>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <MX_SPI1_Init+0x64>)
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <MX_SPI1_Init+0x64>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011c8:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <MX_SPI1_Init+0x64>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <MX_SPI1_Init+0x64>)
 80011d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80011d6:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <MX_SPI1_Init+0x64>)
 80011d8:	2220      	movs	r2, #32
 80011da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011dc:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <MX_SPI1_Init+0x64>)
 80011de:	2200      	movs	r2, #0
 80011e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <MX_SPI1_Init+0x64>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011e8:	4b07      	ldr	r3, [pc, #28]	; (8001208 <MX_SPI1_Init+0x64>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <MX_SPI1_Init+0x64>)
 80011f0:	220a      	movs	r2, #10
 80011f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011f4:	4804      	ldr	r0, [pc, #16]	; (8001208 <MX_SPI1_Init+0x64>)
 80011f6:	f001 f84d 	bl	8002294 <HAL_SPI_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001200:	f000 f852 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000128 	.word	0x20000128
 800120c:	40013000 	.word	0x40013000

08001210 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b088      	sub	sp, #32
 8001214:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001216:	f107 0310 	add.w	r3, r7, #16
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001224:	4b1e      	ldr	r3, [pc, #120]	; (80012a0 <MX_GPIO_Init+0x90>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	4a1d      	ldr	r2, [pc, #116]	; (80012a0 <MX_GPIO_Init+0x90>)
 800122a:	f043 0320 	orr.w	r3, r3, #32
 800122e:	6193      	str	r3, [r2, #24]
 8001230:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <MX_GPIO_Init+0x90>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	f003 0320 	and.w	r3, r3, #32
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123c:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <MX_GPIO_Init+0x90>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	4a17      	ldr	r2, [pc, #92]	; (80012a0 <MX_GPIO_Init+0x90>)
 8001242:	f043 0304 	orr.w	r3, r3, #4
 8001246:	6193      	str	r3, [r2, #24]
 8001248:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <MX_GPIO_Init+0x90>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	f003 0304 	and.w	r3, r3, #4
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <MX_GPIO_Init+0x90>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	4a11      	ldr	r2, [pc, #68]	; (80012a0 <MX_GPIO_Init+0x90>)
 800125a:	f043 0308 	orr.w	r3, r3, #8
 800125e:	6193      	str	r3, [r2, #24]
 8001260:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <MX_GPIO_Init+0x90>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	f003 0308 	and.w	r3, r3, #8
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CSNpin_Pin|CEpin_Pin, GPIO_PIN_RESET);
 800126c:	2200      	movs	r2, #0
 800126e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001272:	480c      	ldr	r0, [pc, #48]	; (80012a4 <MX_GPIO_Init+0x94>)
 8001274:	f000 fc0c 	bl	8001a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CSNpin_Pin CEpin_Pin */
  GPIO_InitStruct.Pin = CSNpin_Pin|CEpin_Pin;
 8001278:	f44f 7340 	mov.w	r3, #768	; 0x300
 800127c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127e:	2301      	movs	r3, #1
 8001280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001286:	2302      	movs	r3, #2
 8001288:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128a:	f107 0310 	add.w	r3, r7, #16
 800128e:	4619      	mov	r1, r3
 8001290:	4804      	ldr	r0, [pc, #16]	; (80012a4 <MX_GPIO_Init+0x94>)
 8001292:	f000 faa3 	bl	80017dc <HAL_GPIO_Init>

}
 8001296:	bf00      	nop
 8001298:	3720      	adds	r7, #32
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40010c00 	.word	0x40010c00

080012a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr

080012b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012ba:	4b15      	ldr	r3, [pc, #84]	; (8001310 <HAL_MspInit+0x5c>)
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	4a14      	ldr	r2, [pc, #80]	; (8001310 <HAL_MspInit+0x5c>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	6193      	str	r3, [r2, #24]
 80012c6:	4b12      	ldr	r3, [pc, #72]	; (8001310 <HAL_MspInit+0x5c>)
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d2:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <HAL_MspInit+0x5c>)
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	4a0e      	ldr	r2, [pc, #56]	; (8001310 <HAL_MspInit+0x5c>)
 80012d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012dc:	61d3      	str	r3, [r2, #28]
 80012de:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <HAL_MspInit+0x5c>)
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012ea:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <HAL_MspInit+0x60>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	4a04      	ldr	r2, [pc, #16]	; (8001314 <HAL_MspInit+0x60>)
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001306:	bf00      	nop
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr
 8001310:	40021000 	.word	0x40021000
 8001314:	40010000 	.word	0x40010000

08001318 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b088      	sub	sp, #32
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 0310 	add.w	r3, r7, #16
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a1b      	ldr	r2, [pc, #108]	; (80013a0 <HAL_SPI_MspInit+0x88>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d12f      	bne.n	8001398 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001338:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <HAL_SPI_MspInit+0x8c>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	4a19      	ldr	r2, [pc, #100]	; (80013a4 <HAL_SPI_MspInit+0x8c>)
 800133e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001342:	6193      	str	r3, [r2, #24]
 8001344:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <HAL_SPI_MspInit+0x8c>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001350:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <HAL_SPI_MspInit+0x8c>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	4a13      	ldr	r2, [pc, #76]	; (80013a4 <HAL_SPI_MspInit+0x8c>)
 8001356:	f043 0304 	orr.w	r3, r3, #4
 800135a:	6193      	str	r3, [r2, #24]
 800135c:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <HAL_SPI_MspInit+0x8c>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	f003 0304 	and.w	r3, r3, #4
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001368:	23a0      	movs	r3, #160	; 0xa0
 800136a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136c:	2302      	movs	r3, #2
 800136e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001370:	2303      	movs	r3, #3
 8001372:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001374:	f107 0310 	add.w	r3, r7, #16
 8001378:	4619      	mov	r1, r3
 800137a:	480b      	ldr	r0, [pc, #44]	; (80013a8 <HAL_SPI_MspInit+0x90>)
 800137c:	f000 fa2e 	bl	80017dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001380:	2340      	movs	r3, #64	; 0x40
 8001382:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138c:	f107 0310 	add.w	r3, r7, #16
 8001390:	4619      	mov	r1, r3
 8001392:	4805      	ldr	r0, [pc, #20]	; (80013a8 <HAL_SPI_MspInit+0x90>)
 8001394:	f000 fa22 	bl	80017dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001398:	bf00      	nop
 800139a:	3720      	adds	r7, #32
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40013000 	.word	0x40013000
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40010800 	.word	0x40010800

080013ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr

080013b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <HardFault_Handler+0x4>

080013be <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c2:	e7fe      	b.n	80013c2 <MemManage_Handler+0x4>

080013c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <BusFault_Handler+0x4>

080013ca <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013ce:	e7fe      	b.n	80013ce <UsageFault_Handler+0x4>

080013d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr

080013dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr

080013e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr

080013f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f8:	f000 f8ce 	bl	8001598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}

08001400 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001408:	4b11      	ldr	r3, [pc, #68]	; (8001450 <_sbrk+0x50>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d102      	bne.n	8001416 <_sbrk+0x16>
		heap_end = &end;
 8001410:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <_sbrk+0x50>)
 8001412:	4a10      	ldr	r2, [pc, #64]	; (8001454 <_sbrk+0x54>)
 8001414:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001416:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <_sbrk+0x50>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800141c:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <_sbrk+0x50>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4413      	add	r3, r2
 8001424:	466a      	mov	r2, sp
 8001426:	4293      	cmp	r3, r2
 8001428:	d907      	bls.n	800143a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800142a:	f001 fc4d 	bl	8002cc8 <__errno>
 800142e:	4602      	mov	r2, r0
 8001430:	230c      	movs	r3, #12
 8001432:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001434:	f04f 33ff 	mov.w	r3, #4294967295
 8001438:	e006      	b.n	8001448 <_sbrk+0x48>
	}

	heap_end += incr;
 800143a:	4b05      	ldr	r3, [pc, #20]	; (8001450 <_sbrk+0x50>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4413      	add	r3, r2
 8001442:	4a03      	ldr	r2, [pc, #12]	; (8001450 <_sbrk+0x50>)
 8001444:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001446:	68fb      	ldr	r3, [r7, #12]
}
 8001448:	4618      	mov	r0, r3
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	2000011c 	.word	0x2000011c
 8001454:	20000188 	.word	0x20000188

08001458 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800145c:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <SystemInit+0x5c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a14      	ldr	r2, [pc, #80]	; (80014b4 <SystemInit+0x5c>)
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <SystemInit+0x5c>)
 800146a:	685a      	ldr	r2, [r3, #4]
 800146c:	4911      	ldr	r1, [pc, #68]	; (80014b4 <SystemInit+0x5c>)
 800146e:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <SystemInit+0x60>)
 8001470:	4013      	ands	r3, r2
 8001472:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001474:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <SystemInit+0x5c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a0e      	ldr	r2, [pc, #56]	; (80014b4 <SystemInit+0x5c>)
 800147a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800147e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001482:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001484:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <SystemInit+0x5c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <SystemInit+0x5c>)
 800148a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800148e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001490:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <SystemInit+0x5c>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	4a07      	ldr	r2, [pc, #28]	; (80014b4 <SystemInit+0x5c>)
 8001496:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800149a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <SystemInit+0x5c>)
 800149e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80014a2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80014a4:	4b05      	ldr	r3, [pc, #20]	; (80014bc <SystemInit+0x64>)
 80014a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014aa:	609a      	str	r2, [r3, #8]
#endif 
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	40021000 	.word	0x40021000
 80014b8:	f8ff0000 	.word	0xf8ff0000
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80014c0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80014c2:	e003      	b.n	80014cc <LoopCopyDataInit>

080014c4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80014c4:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80014c6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80014c8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80014ca:	3104      	adds	r1, #4

080014cc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80014cc:	480a      	ldr	r0, [pc, #40]	; (80014f8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80014ce:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80014d0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80014d2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80014d4:	d3f6      	bcc.n	80014c4 <CopyDataInit>
  ldr r2, =_sbss
 80014d6:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80014d8:	e002      	b.n	80014e0 <LoopFillZerobss>

080014da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80014da:	2300      	movs	r3, #0
  str r3, [r2], #4
 80014dc:	f842 3b04 	str.w	r3, [r2], #4

080014e0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80014e2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80014e4:	d3f9      	bcc.n	80014da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014e6:	f7ff ffb7 	bl	8001458 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ea:	f001 fbf3 	bl	8002cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014ee:	f7ff fdd9 	bl	80010a4 <main>
  bx lr
 80014f2:	4770      	bx	lr
  ldr r3, =_sidata
 80014f4:	08003b10 	.word	0x08003b10
  ldr r0, =_sdata
 80014f8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80014fc:	20000098 	.word	0x20000098
  ldr r2, =_sbss
 8001500:	20000098 	.word	0x20000098
  ldr r3, = _ebss
 8001504:	20000188 	.word	0x20000188

08001508 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001508:	e7fe      	b.n	8001508 <ADC1_2_IRQHandler>
	...

0800150c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <HAL_Init+0x28>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a07      	ldr	r2, [pc, #28]	; (8001534 <HAL_Init+0x28>)
 8001516:	f043 0310 	orr.w	r3, r3, #16
 800151a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800151c:	2003      	movs	r0, #3
 800151e:	f000 f929 	bl	8001774 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001522:	2000      	movs	r0, #0
 8001524:	f000 f808 	bl	8001538 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001528:	f7ff fec4 	bl	80012b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40022000 	.word	0x40022000

08001538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001540:	4b12      	ldr	r3, [pc, #72]	; (800158c <HAL_InitTick+0x54>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_InitTick+0x58>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	4619      	mov	r1, r3
 800154a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800154e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001552:	fbb2 f3f3 	udiv	r3, r2, r3
 8001556:	4618      	mov	r0, r3
 8001558:	f000 f933 	bl	80017c2 <HAL_SYSTICK_Config>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e00e      	b.n	8001584 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b0f      	cmp	r3, #15
 800156a:	d80a      	bhi.n	8001582 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800156c:	2200      	movs	r2, #0
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	f04f 30ff 	mov.w	r0, #4294967295
 8001574:	f000 f909 	bl	800178a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001578:	4a06      	ldr	r2, [pc, #24]	; (8001594 <HAL_InitTick+0x5c>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800157e:	2300      	movs	r3, #0
 8001580:	e000      	b.n	8001584 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
}
 8001584:	4618      	mov	r0, r3
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000028 	.word	0x20000028
 8001590:	20000030 	.word	0x20000030
 8001594:	2000002c 	.word	0x2000002c

08001598 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <HAL_IncTick+0x1c>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <HAL_IncTick+0x20>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	4a03      	ldr	r2, [pc, #12]	; (80015b8 <HAL_IncTick+0x20>)
 80015aa:	6013      	str	r3, [r2, #0]
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr
 80015b4:	20000030 	.word	0x20000030
 80015b8:	20000180 	.word	0x20000180

080015bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return uwTick;
 80015c0:	4b02      	ldr	r3, [pc, #8]	; (80015cc <HAL_GetTick+0x10>)
 80015c2:	681b      	ldr	r3, [r3, #0]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr
 80015cc:	20000180 	.word	0x20000180

080015d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015d8:	f7ff fff0 	bl	80015bc <HAL_GetTick>
 80015dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e8:	d005      	beq.n	80015f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ea:	4b09      	ldr	r3, [pc, #36]	; (8001610 <HAL_Delay+0x40>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	461a      	mov	r2, r3
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4413      	add	r3, r2
 80015f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015f6:	bf00      	nop
 80015f8:	f7ff ffe0 	bl	80015bc <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	429a      	cmp	r2, r3
 8001606:	d8f7      	bhi.n	80015f8 <HAL_Delay+0x28>
  {
  }
}
 8001608:	bf00      	nop
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20000030 	.word	0x20000030

08001614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001624:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <__NVIC_SetPriorityGrouping+0x44>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001630:	4013      	ands	r3, r2
 8001632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800163c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001646:	4a04      	ldr	r2, [pc, #16]	; (8001658 <__NVIC_SetPriorityGrouping+0x44>)
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	60d3      	str	r3, [r2, #12]
}
 800164c:	bf00      	nop
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001660:	4b04      	ldr	r3, [pc, #16]	; (8001674 <__NVIC_GetPriorityGrouping+0x18>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	0a1b      	lsrs	r3, r3, #8
 8001666:	f003 0307 	and.w	r3, r3, #7
}
 800166a:	4618      	mov	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	6039      	str	r1, [r7, #0]
 8001682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001688:	2b00      	cmp	r3, #0
 800168a:	db0a      	blt.n	80016a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	b2da      	uxtb	r2, r3
 8001690:	490c      	ldr	r1, [pc, #48]	; (80016c4 <__NVIC_SetPriority+0x4c>)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	0112      	lsls	r2, r2, #4
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	440b      	add	r3, r1
 800169c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a0:	e00a      	b.n	80016b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4908      	ldr	r1, [pc, #32]	; (80016c8 <__NVIC_SetPriority+0x50>)
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	3b04      	subs	r3, #4
 80016b0:	0112      	lsls	r2, r2, #4
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	440b      	add	r3, r1
 80016b6:	761a      	strb	r2, [r3, #24]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000e100 	.word	0xe000e100
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b089      	sub	sp, #36	; 0x24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f1c3 0307 	rsb	r3, r3, #7
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	bf28      	it	cs
 80016ea:	2304      	movcs	r3, #4
 80016ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3304      	adds	r3, #4
 80016f2:	2b06      	cmp	r3, #6
 80016f4:	d902      	bls.n	80016fc <NVIC_EncodePriority+0x30>
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3b03      	subs	r3, #3
 80016fa:	e000      	b.n	80016fe <NVIC_EncodePriority+0x32>
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001700:	f04f 32ff 	mov.w	r2, #4294967295
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43da      	mvns	r2, r3
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	401a      	ands	r2, r3
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001714:	f04f 31ff 	mov.w	r1, #4294967295
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	fa01 f303 	lsl.w	r3, r1, r3
 800171e:	43d9      	mvns	r1, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001724:	4313      	orrs	r3, r2
         );
}
 8001726:	4618      	mov	r0, r3
 8001728:	3724      	adds	r7, #36	; 0x24
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3b01      	subs	r3, #1
 800173c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001740:	d301      	bcc.n	8001746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001742:	2301      	movs	r3, #1
 8001744:	e00f      	b.n	8001766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001746:	4a0a      	ldr	r2, [pc, #40]	; (8001770 <SysTick_Config+0x40>)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3b01      	subs	r3, #1
 800174c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800174e:	210f      	movs	r1, #15
 8001750:	f04f 30ff 	mov.w	r0, #4294967295
 8001754:	f7ff ff90 	bl	8001678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <SysTick_Config+0x40>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800175e:	4b04      	ldr	r3, [pc, #16]	; (8001770 <SysTick_Config+0x40>)
 8001760:	2207      	movs	r2, #7
 8001762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	e000e010 	.word	0xe000e010

08001774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ff49 	bl	8001614 <__NVIC_SetPriorityGrouping>
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800178a:	b580      	push	{r7, lr}
 800178c:	b086      	sub	sp, #24
 800178e:	af00      	add	r7, sp, #0
 8001790:	4603      	mov	r3, r0
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	607a      	str	r2, [r7, #4]
 8001796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800179c:	f7ff ff5e 	bl	800165c <__NVIC_GetPriorityGrouping>
 80017a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	68b9      	ldr	r1, [r7, #8]
 80017a6:	6978      	ldr	r0, [r7, #20]
 80017a8:	f7ff ff90 	bl	80016cc <NVIC_EncodePriority>
 80017ac:	4602      	mov	r2, r0
 80017ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b2:	4611      	mov	r1, r2
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff ff5f 	bl	8001678 <__NVIC_SetPriority>
}
 80017ba:	bf00      	nop
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff ffb0 	bl	8001730 <SysTick_Config>
 80017d0:	4603      	mov	r3, r0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017dc:	b480      	push	{r7}
 80017de:	b08b      	sub	sp, #44	; 0x2c
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017e6:	2300      	movs	r3, #0
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017ea:	2300      	movs	r3, #0
 80017ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ee:	e127      	b.n	8001a40 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017f0:	2201      	movs	r2, #1
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	69fa      	ldr	r2, [r7, #28]
 8001800:	4013      	ands	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	429a      	cmp	r2, r3
 800180a:	f040 8116 	bne.w	8001a3a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b12      	cmp	r3, #18
 8001814:	d034      	beq.n	8001880 <HAL_GPIO_Init+0xa4>
 8001816:	2b12      	cmp	r3, #18
 8001818:	d80d      	bhi.n	8001836 <HAL_GPIO_Init+0x5a>
 800181a:	2b02      	cmp	r3, #2
 800181c:	d02b      	beq.n	8001876 <HAL_GPIO_Init+0x9a>
 800181e:	2b02      	cmp	r3, #2
 8001820:	d804      	bhi.n	800182c <HAL_GPIO_Init+0x50>
 8001822:	2b00      	cmp	r3, #0
 8001824:	d031      	beq.n	800188a <HAL_GPIO_Init+0xae>
 8001826:	2b01      	cmp	r3, #1
 8001828:	d01c      	beq.n	8001864 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800182a:	e048      	b.n	80018be <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800182c:	2b03      	cmp	r3, #3
 800182e:	d043      	beq.n	80018b8 <HAL_GPIO_Init+0xdc>
 8001830:	2b11      	cmp	r3, #17
 8001832:	d01b      	beq.n	800186c <HAL_GPIO_Init+0x90>
          break;
 8001834:	e043      	b.n	80018be <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001836:	4a89      	ldr	r2, [pc, #548]	; (8001a5c <HAL_GPIO_Init+0x280>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d026      	beq.n	800188a <HAL_GPIO_Init+0xae>
 800183c:	4a87      	ldr	r2, [pc, #540]	; (8001a5c <HAL_GPIO_Init+0x280>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d806      	bhi.n	8001850 <HAL_GPIO_Init+0x74>
 8001842:	4a87      	ldr	r2, [pc, #540]	; (8001a60 <HAL_GPIO_Init+0x284>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d020      	beq.n	800188a <HAL_GPIO_Init+0xae>
 8001848:	4a86      	ldr	r2, [pc, #536]	; (8001a64 <HAL_GPIO_Init+0x288>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d01d      	beq.n	800188a <HAL_GPIO_Init+0xae>
          break;
 800184e:	e036      	b.n	80018be <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001850:	4a85      	ldr	r2, [pc, #532]	; (8001a68 <HAL_GPIO_Init+0x28c>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d019      	beq.n	800188a <HAL_GPIO_Init+0xae>
 8001856:	4a85      	ldr	r2, [pc, #532]	; (8001a6c <HAL_GPIO_Init+0x290>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d016      	beq.n	800188a <HAL_GPIO_Init+0xae>
 800185c:	4a84      	ldr	r2, [pc, #528]	; (8001a70 <HAL_GPIO_Init+0x294>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d013      	beq.n	800188a <HAL_GPIO_Init+0xae>
          break;
 8001862:	e02c      	b.n	80018be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	623b      	str	r3, [r7, #32]
          break;
 800186a:	e028      	b.n	80018be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	3304      	adds	r3, #4
 8001872:	623b      	str	r3, [r7, #32]
          break;
 8001874:	e023      	b.n	80018be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	3308      	adds	r3, #8
 800187c:	623b      	str	r3, [r7, #32]
          break;
 800187e:	e01e      	b.n	80018be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	330c      	adds	r3, #12
 8001886:	623b      	str	r3, [r7, #32]
          break;
 8001888:	e019      	b.n	80018be <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d102      	bne.n	8001898 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001892:	2304      	movs	r3, #4
 8001894:	623b      	str	r3, [r7, #32]
          break;
 8001896:	e012      	b.n	80018be <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d105      	bne.n	80018ac <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018a0:	2308      	movs	r3, #8
 80018a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	69fa      	ldr	r2, [r7, #28]
 80018a8:	611a      	str	r2, [r3, #16]
          break;
 80018aa:	e008      	b.n	80018be <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018ac:	2308      	movs	r3, #8
 80018ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	69fa      	ldr	r2, [r7, #28]
 80018b4:	615a      	str	r2, [r3, #20]
          break;
 80018b6:	e002      	b.n	80018be <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018b8:	2300      	movs	r3, #0
 80018ba:	623b      	str	r3, [r7, #32]
          break;
 80018bc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	2bff      	cmp	r3, #255	; 0xff
 80018c2:	d801      	bhi.n	80018c8 <HAL_GPIO_Init+0xec>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	e001      	b.n	80018cc <HAL_GPIO_Init+0xf0>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3304      	adds	r3, #4
 80018cc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	2bff      	cmp	r3, #255	; 0xff
 80018d2:	d802      	bhi.n	80018da <HAL_GPIO_Init+0xfe>
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	e002      	b.n	80018e0 <HAL_GPIO_Init+0x104>
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	3b08      	subs	r3, #8
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	210f      	movs	r1, #15
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	fa01 f303 	lsl.w	r3, r1, r3
 80018ee:	43db      	mvns	r3, r3
 80018f0:	401a      	ands	r2, r3
 80018f2:	6a39      	ldr	r1, [r7, #32]
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	fa01 f303 	lsl.w	r3, r1, r3
 80018fa:	431a      	orrs	r2, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001908:	2b00      	cmp	r3, #0
 800190a:	f000 8096 	beq.w	8001a3a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800190e:	4b59      	ldr	r3, [pc, #356]	; (8001a74 <HAL_GPIO_Init+0x298>)
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	4a58      	ldr	r2, [pc, #352]	; (8001a74 <HAL_GPIO_Init+0x298>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	6193      	str	r3, [r2, #24]
 800191a:	4b56      	ldr	r3, [pc, #344]	; (8001a74 <HAL_GPIO_Init+0x298>)
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001926:	4a54      	ldr	r2, [pc, #336]	; (8001a78 <HAL_GPIO_Init+0x29c>)
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192a:	089b      	lsrs	r3, r3, #2
 800192c:	3302      	adds	r3, #2
 800192e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001932:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	220f      	movs	r2, #15
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	4013      	ands	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a4b      	ldr	r2, [pc, #300]	; (8001a7c <HAL_GPIO_Init+0x2a0>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d013      	beq.n	800197a <HAL_GPIO_Init+0x19e>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a4a      	ldr	r2, [pc, #296]	; (8001a80 <HAL_GPIO_Init+0x2a4>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d00d      	beq.n	8001976 <HAL_GPIO_Init+0x19a>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a49      	ldr	r2, [pc, #292]	; (8001a84 <HAL_GPIO_Init+0x2a8>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d007      	beq.n	8001972 <HAL_GPIO_Init+0x196>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a48      	ldr	r2, [pc, #288]	; (8001a88 <HAL_GPIO_Init+0x2ac>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d101      	bne.n	800196e <HAL_GPIO_Init+0x192>
 800196a:	2303      	movs	r3, #3
 800196c:	e006      	b.n	800197c <HAL_GPIO_Init+0x1a0>
 800196e:	2304      	movs	r3, #4
 8001970:	e004      	b.n	800197c <HAL_GPIO_Init+0x1a0>
 8001972:	2302      	movs	r3, #2
 8001974:	e002      	b.n	800197c <HAL_GPIO_Init+0x1a0>
 8001976:	2301      	movs	r3, #1
 8001978:	e000      	b.n	800197c <HAL_GPIO_Init+0x1a0>
 800197a:	2300      	movs	r3, #0
 800197c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800197e:	f002 0203 	and.w	r2, r2, #3
 8001982:	0092      	lsls	r2, r2, #2
 8001984:	4093      	lsls	r3, r2
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	4313      	orrs	r3, r2
 800198a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800198c:	493a      	ldr	r1, [pc, #232]	; (8001a78 <HAL_GPIO_Init+0x29c>)
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	089b      	lsrs	r3, r3, #2
 8001992:	3302      	adds	r3, #2
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d006      	beq.n	80019b4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019a6:	4b39      	ldr	r3, [pc, #228]	; (8001a8c <HAL_GPIO_Init+0x2b0>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	4938      	ldr	r1, [pc, #224]	; (8001a8c <HAL_GPIO_Init+0x2b0>)
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	600b      	str	r3, [r1, #0]
 80019b2:	e006      	b.n	80019c2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019b4:	4b35      	ldr	r3, [pc, #212]	; (8001a8c <HAL_GPIO_Init+0x2b0>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	43db      	mvns	r3, r3
 80019bc:	4933      	ldr	r1, [pc, #204]	; (8001a8c <HAL_GPIO_Init+0x2b0>)
 80019be:	4013      	ands	r3, r2
 80019c0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d006      	beq.n	80019dc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019ce:	4b2f      	ldr	r3, [pc, #188]	; (8001a8c <HAL_GPIO_Init+0x2b0>)
 80019d0:	685a      	ldr	r2, [r3, #4]
 80019d2:	492e      	ldr	r1, [pc, #184]	; (8001a8c <HAL_GPIO_Init+0x2b0>)
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	604b      	str	r3, [r1, #4]
 80019da:	e006      	b.n	80019ea <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019dc:	4b2b      	ldr	r3, [pc, #172]	; (8001a8c <HAL_GPIO_Init+0x2b0>)
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	43db      	mvns	r3, r3
 80019e4:	4929      	ldr	r1, [pc, #164]	; (8001a8c <HAL_GPIO_Init+0x2b0>)
 80019e6:	4013      	ands	r3, r2
 80019e8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d006      	beq.n	8001a04 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019f6:	4b25      	ldr	r3, [pc, #148]	; (8001a8c <HAL_GPIO_Init+0x2b0>)
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	4924      	ldr	r1, [pc, #144]	; (8001a8c <HAL_GPIO_Init+0x2b0>)
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	608b      	str	r3, [r1, #8]
 8001a02:	e006      	b.n	8001a12 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a04:	4b21      	ldr	r3, [pc, #132]	; (8001a8c <HAL_GPIO_Init+0x2b0>)
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	491f      	ldr	r1, [pc, #124]	; (8001a8c <HAL_GPIO_Init+0x2b0>)
 8001a0e:	4013      	ands	r3, r2
 8001a10:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d006      	beq.n	8001a2c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a1e:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <HAL_GPIO_Init+0x2b0>)
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	491a      	ldr	r1, [pc, #104]	; (8001a8c <HAL_GPIO_Init+0x2b0>)
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	60cb      	str	r3, [r1, #12]
 8001a2a:	e006      	b.n	8001a3a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a2c:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <HAL_GPIO_Init+0x2b0>)
 8001a2e:	68da      	ldr	r2, [r3, #12]
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	43db      	mvns	r3, r3
 8001a34:	4915      	ldr	r1, [pc, #84]	; (8001a8c <HAL_GPIO_Init+0x2b0>)
 8001a36:	4013      	ands	r3, r2
 8001a38:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a46:	fa22 f303 	lsr.w	r3, r2, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f47f aed0 	bne.w	80017f0 <HAL_GPIO_Init+0x14>
  }
}
 8001a50:	bf00      	nop
 8001a52:	372c      	adds	r7, #44	; 0x2c
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	10210000 	.word	0x10210000
 8001a60:	10110000 	.word	0x10110000
 8001a64:	10120000 	.word	0x10120000
 8001a68:	10310000 	.word	0x10310000
 8001a6c:	10320000 	.word	0x10320000
 8001a70:	10220000 	.word	0x10220000
 8001a74:	40021000 	.word	0x40021000
 8001a78:	40010000 	.word	0x40010000
 8001a7c:	40010800 	.word	0x40010800
 8001a80:	40010c00 	.word	0x40010c00
 8001a84:	40011000 	.word	0x40011000
 8001a88:	40011400 	.word	0x40011400
 8001a8c:	40010400 	.word	0x40010400

08001a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	807b      	strh	r3, [r7, #2]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aa0:	787b      	ldrb	r3, [r7, #1]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aa6:	887a      	ldrh	r2, [r7, #2]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001aac:	e003      	b.n	8001ab6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001aae:	887b      	ldrh	r3, [r7, #2]
 8001ab0:	041a      	lsls	r2, r3, #16
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	611a      	str	r2, [r3, #16]
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr

08001ac0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e26c      	b.n	8001fac <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 8087 	beq.w	8001bee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ae0:	4b92      	ldr	r3, [pc, #584]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 030c 	and.w	r3, r3, #12
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	d00c      	beq.n	8001b06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001aec:	4b8f      	ldr	r3, [pc, #572]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f003 030c 	and.w	r3, r3, #12
 8001af4:	2b08      	cmp	r3, #8
 8001af6:	d112      	bne.n	8001b1e <HAL_RCC_OscConfig+0x5e>
 8001af8:	4b8c      	ldr	r3, [pc, #560]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b04:	d10b      	bne.n	8001b1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b06:	4b89      	ldr	r3, [pc, #548]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d06c      	beq.n	8001bec <HAL_RCC_OscConfig+0x12c>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d168      	bne.n	8001bec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e246      	b.n	8001fac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b26:	d106      	bne.n	8001b36 <HAL_RCC_OscConfig+0x76>
 8001b28:	4b80      	ldr	r3, [pc, #512]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a7f      	ldr	r2, [pc, #508]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b32:	6013      	str	r3, [r2, #0]
 8001b34:	e02e      	b.n	8001b94 <HAL_RCC_OscConfig+0xd4>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d10c      	bne.n	8001b58 <HAL_RCC_OscConfig+0x98>
 8001b3e:	4b7b      	ldr	r3, [pc, #492]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a7a      	ldr	r2, [pc, #488]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	4b78      	ldr	r3, [pc, #480]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a77      	ldr	r2, [pc, #476]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	e01d      	b.n	8001b94 <HAL_RCC_OscConfig+0xd4>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b60:	d10c      	bne.n	8001b7c <HAL_RCC_OscConfig+0xbc>
 8001b62:	4b72      	ldr	r3, [pc, #456]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a71      	ldr	r2, [pc, #452]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	4b6f      	ldr	r3, [pc, #444]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a6e      	ldr	r2, [pc, #440]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	e00b      	b.n	8001b94 <HAL_RCC_OscConfig+0xd4>
 8001b7c:	4b6b      	ldr	r3, [pc, #428]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a6a      	ldr	r2, [pc, #424]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b86:	6013      	str	r3, [r2, #0]
 8001b88:	4b68      	ldr	r3, [pc, #416]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a67      	ldr	r2, [pc, #412]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d013      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9c:	f7ff fd0e 	bl	80015bc <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba4:	f7ff fd0a 	bl	80015bc <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b64      	cmp	r3, #100	; 0x64
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e1fa      	b.n	8001fac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb6:	4b5d      	ldr	r3, [pc, #372]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f0      	beq.n	8001ba4 <HAL_RCC_OscConfig+0xe4>
 8001bc2:	e014      	b.n	8001bee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc4:	f7ff fcfa 	bl	80015bc <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bcc:	f7ff fcf6 	bl	80015bc <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b64      	cmp	r3, #100	; 0x64
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e1e6      	b.n	8001fac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bde:	4b53      	ldr	r3, [pc, #332]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0x10c>
 8001bea:	e000      	b.n	8001bee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d063      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bfa:	4b4c      	ldr	r3, [pc, #304]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 030c 	and.w	r3, r3, #12
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00b      	beq.n	8001c1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c06:	4b49      	ldr	r3, [pc, #292]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d11c      	bne.n	8001c4c <HAL_RCC_OscConfig+0x18c>
 8001c12:	4b46      	ldr	r3, [pc, #280]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d116      	bne.n	8001c4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c1e:	4b43      	ldr	r3, [pc, #268]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d005      	beq.n	8001c36 <HAL_RCC_OscConfig+0x176>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d001      	beq.n	8001c36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e1ba      	b.n	8001fac <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c36:	4b3d      	ldr	r3, [pc, #244]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	4939      	ldr	r1, [pc, #228]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c4a:	e03a      	b.n	8001cc2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d020      	beq.n	8001c96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c54:	4b36      	ldr	r3, [pc, #216]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5a:	f7ff fcaf 	bl	80015bc <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c62:	f7ff fcab 	bl	80015bc <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e19b      	b.n	8001fac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c74:	4b2d      	ldr	r3, [pc, #180]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0f0      	beq.n	8001c62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c80:	4b2a      	ldr	r3, [pc, #168]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	4927      	ldr	r1, [pc, #156]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	600b      	str	r3, [r1, #0]
 8001c94:	e015      	b.n	8001cc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c96:	4b26      	ldr	r3, [pc, #152]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9c:	f7ff fc8e 	bl	80015bc <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca4:	f7ff fc8a 	bl	80015bc <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e17a      	b.n	8001fac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cb6:	4b1d      	ldr	r3, [pc, #116]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f0      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0308 	and.w	r3, r3, #8
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d03a      	beq.n	8001d44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d019      	beq.n	8001d0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cd6:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cdc:	f7ff fc6e 	bl	80015bc <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ce4:	f7ff fc6a 	bl	80015bc <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e15a      	b.n	8001fac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf6:	4b0d      	ldr	r3, [pc, #52]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0f0      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d02:	2001      	movs	r0, #1
 8001d04:	f000 faa8 	bl	8002258 <RCC_Delay>
 8001d08:	e01c      	b.n	8001d44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d0a:	4b0a      	ldr	r3, [pc, #40]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d10:	f7ff fc54 	bl	80015bc <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d16:	e00f      	b.n	8001d38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d18:	f7ff fc50 	bl	80015bc <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d908      	bls.n	8001d38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e140      	b.n	8001fac <HAL_RCC_OscConfig+0x4ec>
 8001d2a:	bf00      	nop
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	42420000 	.word	0x42420000
 8001d34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d38:	4b9e      	ldr	r3, [pc, #632]	; (8001fb4 <HAL_RCC_OscConfig+0x4f4>)
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1e9      	bne.n	8001d18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f000 80a6 	beq.w	8001e9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d52:	2300      	movs	r3, #0
 8001d54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d56:	4b97      	ldr	r3, [pc, #604]	; (8001fb4 <HAL_RCC_OscConfig+0x4f4>)
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10d      	bne.n	8001d7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d62:	4b94      	ldr	r3, [pc, #592]	; (8001fb4 <HAL_RCC_OscConfig+0x4f4>)
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	4a93      	ldr	r2, [pc, #588]	; (8001fb4 <HAL_RCC_OscConfig+0x4f4>)
 8001d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d6c:	61d3      	str	r3, [r2, #28]
 8001d6e:	4b91      	ldr	r3, [pc, #580]	; (8001fb4 <HAL_RCC_OscConfig+0x4f4>)
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d76:	60bb      	str	r3, [r7, #8]
 8001d78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d7e:	4b8e      	ldr	r3, [pc, #568]	; (8001fb8 <HAL_RCC_OscConfig+0x4f8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d118      	bne.n	8001dbc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d8a:	4b8b      	ldr	r3, [pc, #556]	; (8001fb8 <HAL_RCC_OscConfig+0x4f8>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a8a      	ldr	r2, [pc, #552]	; (8001fb8 <HAL_RCC_OscConfig+0x4f8>)
 8001d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d96:	f7ff fc11 	bl	80015bc <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d9e:	f7ff fc0d 	bl	80015bc <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b64      	cmp	r3, #100	; 0x64
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e0fd      	b.n	8001fac <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db0:	4b81      	ldr	r3, [pc, #516]	; (8001fb8 <HAL_RCC_OscConfig+0x4f8>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d0f0      	beq.n	8001d9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d106      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x312>
 8001dc4:	4b7b      	ldr	r3, [pc, #492]	; (8001fb4 <HAL_RCC_OscConfig+0x4f4>)
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	4a7a      	ldr	r2, [pc, #488]	; (8001fb4 <HAL_RCC_OscConfig+0x4f4>)
 8001dca:	f043 0301 	orr.w	r3, r3, #1
 8001dce:	6213      	str	r3, [r2, #32]
 8001dd0:	e02d      	b.n	8001e2e <HAL_RCC_OscConfig+0x36e>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10c      	bne.n	8001df4 <HAL_RCC_OscConfig+0x334>
 8001dda:	4b76      	ldr	r3, [pc, #472]	; (8001fb4 <HAL_RCC_OscConfig+0x4f4>)
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	4a75      	ldr	r2, [pc, #468]	; (8001fb4 <HAL_RCC_OscConfig+0x4f4>)
 8001de0:	f023 0301 	bic.w	r3, r3, #1
 8001de4:	6213      	str	r3, [r2, #32]
 8001de6:	4b73      	ldr	r3, [pc, #460]	; (8001fb4 <HAL_RCC_OscConfig+0x4f4>)
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	4a72      	ldr	r2, [pc, #456]	; (8001fb4 <HAL_RCC_OscConfig+0x4f4>)
 8001dec:	f023 0304 	bic.w	r3, r3, #4
 8001df0:	6213      	str	r3, [r2, #32]
 8001df2:	e01c      	b.n	8001e2e <HAL_RCC_OscConfig+0x36e>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	2b05      	cmp	r3, #5
 8001dfa:	d10c      	bne.n	8001e16 <HAL_RCC_OscConfig+0x356>
 8001dfc:	4b6d      	ldr	r3, [pc, #436]	; (8001fb4 <HAL_RCC_OscConfig+0x4f4>)
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	4a6c      	ldr	r2, [pc, #432]	; (8001fb4 <HAL_RCC_OscConfig+0x4f4>)
 8001e02:	f043 0304 	orr.w	r3, r3, #4
 8001e06:	6213      	str	r3, [r2, #32]
 8001e08:	4b6a      	ldr	r3, [pc, #424]	; (8001fb4 <HAL_RCC_OscConfig+0x4f4>)
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	4a69      	ldr	r2, [pc, #420]	; (8001fb4 <HAL_RCC_OscConfig+0x4f4>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	6213      	str	r3, [r2, #32]
 8001e14:	e00b      	b.n	8001e2e <HAL_RCC_OscConfig+0x36e>
 8001e16:	4b67      	ldr	r3, [pc, #412]	; (8001fb4 <HAL_RCC_OscConfig+0x4f4>)
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	4a66      	ldr	r2, [pc, #408]	; (8001fb4 <HAL_RCC_OscConfig+0x4f4>)
 8001e1c:	f023 0301 	bic.w	r3, r3, #1
 8001e20:	6213      	str	r3, [r2, #32]
 8001e22:	4b64      	ldr	r3, [pc, #400]	; (8001fb4 <HAL_RCC_OscConfig+0x4f4>)
 8001e24:	6a1b      	ldr	r3, [r3, #32]
 8001e26:	4a63      	ldr	r2, [pc, #396]	; (8001fb4 <HAL_RCC_OscConfig+0x4f4>)
 8001e28:	f023 0304 	bic.w	r3, r3, #4
 8001e2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d015      	beq.n	8001e62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e36:	f7ff fbc1 	bl	80015bc <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e3c:	e00a      	b.n	8001e54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3e:	f7ff fbbd 	bl	80015bc <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e0ab      	b.n	8001fac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e54:	4b57      	ldr	r3, [pc, #348]	; (8001fb4 <HAL_RCC_OscConfig+0x4f4>)
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0ee      	beq.n	8001e3e <HAL_RCC_OscConfig+0x37e>
 8001e60:	e014      	b.n	8001e8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e62:	f7ff fbab 	bl	80015bc <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e68:	e00a      	b.n	8001e80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e6a:	f7ff fba7 	bl	80015bc <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e095      	b.n	8001fac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e80:	4b4c      	ldr	r3, [pc, #304]	; (8001fb4 <HAL_RCC_OscConfig+0x4f4>)
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1ee      	bne.n	8001e6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e8c:	7dfb      	ldrb	r3, [r7, #23]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d105      	bne.n	8001e9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e92:	4b48      	ldr	r3, [pc, #288]	; (8001fb4 <HAL_RCC_OscConfig+0x4f4>)
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	4a47      	ldr	r2, [pc, #284]	; (8001fb4 <HAL_RCC_OscConfig+0x4f4>)
 8001e98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 8081 	beq.w	8001faa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ea8:	4b42      	ldr	r3, [pc, #264]	; (8001fb4 <HAL_RCC_OscConfig+0x4f4>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 030c 	and.w	r3, r3, #12
 8001eb0:	2b08      	cmp	r3, #8
 8001eb2:	d061      	beq.n	8001f78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69db      	ldr	r3, [r3, #28]
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d146      	bne.n	8001f4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ebc:	4b3f      	ldr	r3, [pc, #252]	; (8001fbc <HAL_RCC_OscConfig+0x4fc>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec2:	f7ff fb7b 	bl	80015bc <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eca:	f7ff fb77 	bl	80015bc <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e067      	b.n	8001fac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001edc:	4b35      	ldr	r3, [pc, #212]	; (8001fb4 <HAL_RCC_OscConfig+0x4f4>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1f0      	bne.n	8001eca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ef0:	d108      	bne.n	8001f04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ef2:	4b30      	ldr	r3, [pc, #192]	; (8001fb4 <HAL_RCC_OscConfig+0x4f4>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	492d      	ldr	r1, [pc, #180]	; (8001fb4 <HAL_RCC_OscConfig+0x4f4>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f04:	4b2b      	ldr	r3, [pc, #172]	; (8001fb4 <HAL_RCC_OscConfig+0x4f4>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a19      	ldr	r1, [r3, #32]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f14:	430b      	orrs	r3, r1
 8001f16:	4927      	ldr	r1, [pc, #156]	; (8001fb4 <HAL_RCC_OscConfig+0x4f4>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f1c:	4b27      	ldr	r3, [pc, #156]	; (8001fbc <HAL_RCC_OscConfig+0x4fc>)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f22:	f7ff fb4b 	bl	80015bc <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f2a:	f7ff fb47 	bl	80015bc <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e037      	b.n	8001fac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f3c:	4b1d      	ldr	r3, [pc, #116]	; (8001fb4 <HAL_RCC_OscConfig+0x4f4>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0f0      	beq.n	8001f2a <HAL_RCC_OscConfig+0x46a>
 8001f48:	e02f      	b.n	8001faa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f4a:	4b1c      	ldr	r3, [pc, #112]	; (8001fbc <HAL_RCC_OscConfig+0x4fc>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f50:	f7ff fb34 	bl	80015bc <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f58:	f7ff fb30 	bl	80015bc <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e020      	b.n	8001fac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f6a:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <HAL_RCC_OscConfig+0x4f4>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f0      	bne.n	8001f58 <HAL_RCC_OscConfig+0x498>
 8001f76:	e018      	b.n	8001faa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	69db      	ldr	r3, [r3, #28]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d101      	bne.n	8001f84 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e013      	b.n	8001fac <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f84:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <HAL_RCC_OscConfig+0x4f4>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d106      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d001      	beq.n	8001faa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40007000 	.word	0x40007000
 8001fbc:	42420060 	.word	0x42420060

08001fc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e0d0      	b.n	8002176 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd4:	4b6a      	ldr	r3, [pc, #424]	; (8002180 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d910      	bls.n	8002004 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe2:	4b67      	ldr	r3, [pc, #412]	; (8002180 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f023 0207 	bic.w	r2, r3, #7
 8001fea:	4965      	ldr	r1, [pc, #404]	; (8002180 <HAL_RCC_ClockConfig+0x1c0>)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff2:	4b63      	ldr	r3, [pc, #396]	; (8002180 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d001      	beq.n	8002004 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e0b8      	b.n	8002176 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d020      	beq.n	8002052 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	2b00      	cmp	r3, #0
 800201a:	d005      	beq.n	8002028 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800201c:	4b59      	ldr	r3, [pc, #356]	; (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	4a58      	ldr	r2, [pc, #352]	; (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 8002022:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002026:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0308 	and.w	r3, r3, #8
 8002030:	2b00      	cmp	r3, #0
 8002032:	d005      	beq.n	8002040 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002034:	4b53      	ldr	r3, [pc, #332]	; (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	4a52      	ldr	r2, [pc, #328]	; (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 800203a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800203e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002040:	4b50      	ldr	r3, [pc, #320]	; (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	494d      	ldr	r1, [pc, #308]	; (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 800204e:	4313      	orrs	r3, r2
 8002050:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d040      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d107      	bne.n	8002076 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002066:	4b47      	ldr	r3, [pc, #284]	; (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d115      	bne.n	800209e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e07f      	b.n	8002176 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b02      	cmp	r3, #2
 800207c:	d107      	bne.n	800208e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800207e:	4b41      	ldr	r3, [pc, #260]	; (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d109      	bne.n	800209e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e073      	b.n	8002176 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208e:	4b3d      	ldr	r3, [pc, #244]	; (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e06b      	b.n	8002176 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800209e:	4b39      	ldr	r3, [pc, #228]	; (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f023 0203 	bic.w	r2, r3, #3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	4936      	ldr	r1, [pc, #216]	; (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020b0:	f7ff fa84 	bl	80015bc <HAL_GetTick>
 80020b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b6:	e00a      	b.n	80020ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b8:	f7ff fa80 	bl	80015bc <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e053      	b.n	8002176 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ce:	4b2d      	ldr	r3, [pc, #180]	; (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f003 020c 	and.w	r2, r3, #12
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	429a      	cmp	r2, r3
 80020de:	d1eb      	bne.n	80020b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020e0:	4b27      	ldr	r3, [pc, #156]	; (8002180 <HAL_RCC_ClockConfig+0x1c0>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d210      	bcs.n	8002110 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ee:	4b24      	ldr	r3, [pc, #144]	; (8002180 <HAL_RCC_ClockConfig+0x1c0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f023 0207 	bic.w	r2, r3, #7
 80020f6:	4922      	ldr	r1, [pc, #136]	; (8002180 <HAL_RCC_ClockConfig+0x1c0>)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fe:	4b20      	ldr	r3, [pc, #128]	; (8002180 <HAL_RCC_ClockConfig+0x1c0>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	d001      	beq.n	8002110 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e032      	b.n	8002176 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b00      	cmp	r3, #0
 800211a:	d008      	beq.n	800212e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800211c:	4b19      	ldr	r3, [pc, #100]	; (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	4916      	ldr	r1, [pc, #88]	; (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 800212a:	4313      	orrs	r3, r2
 800212c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	2b00      	cmp	r3, #0
 8002138:	d009      	beq.n	800214e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800213a:	4b12      	ldr	r3, [pc, #72]	; (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	490e      	ldr	r1, [pc, #56]	; (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	4313      	orrs	r3, r2
 800214c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800214e:	f000 f821 	bl	8002194 <HAL_RCC_GetSysClockFreq>
 8002152:	4601      	mov	r1, r0
 8002154:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	091b      	lsrs	r3, r3, #4
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	4a0a      	ldr	r2, [pc, #40]	; (8002188 <HAL_RCC_ClockConfig+0x1c8>)
 8002160:	5cd3      	ldrb	r3, [r2, r3]
 8002162:	fa21 f303 	lsr.w	r3, r1, r3
 8002166:	4a09      	ldr	r2, [pc, #36]	; (800218c <HAL_RCC_ClockConfig+0x1cc>)
 8002168:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800216a:	4b09      	ldr	r3, [pc, #36]	; (8002190 <HAL_RCC_ClockConfig+0x1d0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff f9e2 	bl	8001538 <HAL_InitTick>

  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40022000 	.word	0x40022000
 8002184:	40021000 	.word	0x40021000
 8002188:	08003ac4 	.word	0x08003ac4
 800218c:	20000028 	.word	0x20000028
 8002190:	2000002c 	.word	0x2000002c

08002194 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002194:	b490      	push	{r4, r7}
 8002196:	b08a      	sub	sp, #40	; 0x28
 8002198:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800219a:	4b2a      	ldr	r3, [pc, #168]	; (8002244 <HAL_RCC_GetSysClockFreq+0xb0>)
 800219c:	1d3c      	adds	r4, r7, #4
 800219e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021a4:	4b28      	ldr	r3, [pc, #160]	; (8002248 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021a6:	881b      	ldrh	r3, [r3, #0]
 80021a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61fb      	str	r3, [r7, #28]
 80021ae:	2300      	movs	r3, #0
 80021b0:	61bb      	str	r3, [r7, #24]
 80021b2:	2300      	movs	r3, #0
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021be:	4b23      	ldr	r3, [pc, #140]	; (800224c <HAL_RCC_GetSysClockFreq+0xb8>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f003 030c 	and.w	r3, r3, #12
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	d002      	beq.n	80021d4 <HAL_RCC_GetSysClockFreq+0x40>
 80021ce:	2b08      	cmp	r3, #8
 80021d0:	d003      	beq.n	80021da <HAL_RCC_GetSysClockFreq+0x46>
 80021d2:	e02d      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021d4:	4b1e      	ldr	r3, [pc, #120]	; (8002250 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021d6:	623b      	str	r3, [r7, #32]
      break;
 80021d8:	e02d      	b.n	8002236 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	0c9b      	lsrs	r3, r3, #18
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021e6:	4413      	add	r3, r2
 80021e8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80021ec:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d013      	beq.n	8002220 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021f8:	4b14      	ldr	r3, [pc, #80]	; (800224c <HAL_RCC_GetSysClockFreq+0xb8>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	0c5b      	lsrs	r3, r3, #17
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002206:	4413      	add	r3, r2
 8002208:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800220c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	4a0f      	ldr	r2, [pc, #60]	; (8002250 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002212:	fb02 f203 	mul.w	r2, r2, r3
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	fbb2 f3f3 	udiv	r3, r2, r3
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
 800221e:	e004      	b.n	800222a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	4a0c      	ldr	r2, [pc, #48]	; (8002254 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002224:	fb02 f303 	mul.w	r3, r2, r3
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	623b      	str	r3, [r7, #32]
      break;
 800222e:	e002      	b.n	8002236 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002230:	4b07      	ldr	r3, [pc, #28]	; (8002250 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002232:	623b      	str	r3, [r7, #32]
      break;
 8002234:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002236:	6a3b      	ldr	r3, [r7, #32]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3728      	adds	r7, #40	; 0x28
 800223c:	46bd      	mov	sp, r7
 800223e:	bc90      	pop	{r4, r7}
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	08003ab0 	.word	0x08003ab0
 8002248:	08003ac0 	.word	0x08003ac0
 800224c:	40021000 	.word	0x40021000
 8002250:	007a1200 	.word	0x007a1200
 8002254:	003d0900 	.word	0x003d0900

08002258 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002260:	4b0a      	ldr	r3, [pc, #40]	; (800228c <RCC_Delay+0x34>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a0a      	ldr	r2, [pc, #40]	; (8002290 <RCC_Delay+0x38>)
 8002266:	fba2 2303 	umull	r2, r3, r2, r3
 800226a:	0a5b      	lsrs	r3, r3, #9
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	fb02 f303 	mul.w	r3, r2, r3
 8002272:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002274:	bf00      	nop
  }
  while (Delay --);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	1e5a      	subs	r2, r3, #1
 800227a:	60fa      	str	r2, [r7, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1f9      	bne.n	8002274 <RCC_Delay+0x1c>
}
 8002280:	bf00      	nop
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	20000028 	.word	0x20000028
 8002290:	10624dd3 	.word	0x10624dd3

08002294 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e053      	b.n	800234e <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d106      	bne.n	80022c6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff f829 	bl	8001318 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2202      	movs	r2, #2
 80022ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022dc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	431a      	orrs	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	431a      	orrs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	431a      	orrs	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	431a      	orrs	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	ea42 0103 	orr.w	r1, r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	0c1a      	lsrs	r2, r3, #16
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f002 0204 	and.w	r2, r2, #4
 800232c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	69da      	ldr	r2, [r3, #28]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800233c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b088      	sub	sp, #32
 800235a:	af00      	add	r7, sp, #0
 800235c:	60f8      	str	r0, [r7, #12]
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	603b      	str	r3, [r7, #0]
 8002362:	4613      	mov	r3, r2
 8002364:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002366:	2300      	movs	r3, #0
 8002368:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002370:	2b01      	cmp	r3, #1
 8002372:	d101      	bne.n	8002378 <HAL_SPI_Transmit+0x22>
 8002374:	2302      	movs	r3, #2
 8002376:	e11e      	b.n	80025b6 <HAL_SPI_Transmit+0x260>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002380:	f7ff f91c 	bl	80015bc <HAL_GetTick>
 8002384:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002386:	88fb      	ldrh	r3, [r7, #6]
 8002388:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b01      	cmp	r3, #1
 8002394:	d002      	beq.n	800239c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002396:	2302      	movs	r3, #2
 8002398:	77fb      	strb	r3, [r7, #31]
    goto error;
 800239a:	e103      	b.n	80025a4 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d002      	beq.n	80023a8 <HAL_SPI_Transmit+0x52>
 80023a2:	88fb      	ldrh	r3, [r7, #6]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d102      	bne.n	80023ae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80023ac:	e0fa      	b.n	80025a4 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2203      	movs	r2, #3
 80023b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2200      	movs	r2, #0
 80023ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	88fa      	ldrh	r2, [r7, #6]
 80023c6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	88fa      	ldrh	r2, [r7, #6]
 80023cc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023f4:	d107      	bne.n	8002406 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002404:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002410:	2b40      	cmp	r3, #64	; 0x40
 8002412:	d007      	beq.n	8002424 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002422:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800242c:	d14b      	bne.n	80024c6 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d002      	beq.n	800243c <HAL_SPI_Transmit+0xe6>
 8002436:	8afb      	ldrh	r3, [r7, #22]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d13e      	bne.n	80024ba <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002440:	881a      	ldrh	r2, [r3, #0]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244c:	1c9a      	adds	r2, r3, #2
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002456:	b29b      	uxth	r3, r3
 8002458:	3b01      	subs	r3, #1
 800245a:	b29a      	uxth	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002460:	e02b      	b.n	80024ba <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b02      	cmp	r3, #2
 800246e:	d112      	bne.n	8002496 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002474:	881a      	ldrh	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002480:	1c9a      	adds	r2, r3, #2
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800248a:	b29b      	uxth	r3, r3
 800248c:	3b01      	subs	r3, #1
 800248e:	b29a      	uxth	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	86da      	strh	r2, [r3, #54]	; 0x36
 8002494:	e011      	b.n	80024ba <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002496:	f7ff f891 	bl	80015bc <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d803      	bhi.n	80024ae <HAL_SPI_Transmit+0x158>
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ac:	d102      	bne.n	80024b4 <HAL_SPI_Transmit+0x15e>
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d102      	bne.n	80024ba <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80024b8:	e074      	b.n	80025a4 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024be:	b29b      	uxth	r3, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1ce      	bne.n	8002462 <HAL_SPI_Transmit+0x10c>
 80024c4:	e04c      	b.n	8002560 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d002      	beq.n	80024d4 <HAL_SPI_Transmit+0x17e>
 80024ce:	8afb      	ldrh	r3, [r7, #22]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d140      	bne.n	8002556 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	330c      	adds	r3, #12
 80024de:	7812      	ldrb	r2, [r2, #0]
 80024e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	3b01      	subs	r3, #1
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80024fa:	e02c      	b.n	8002556 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b02      	cmp	r3, #2
 8002508:	d113      	bne.n	8002532 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	330c      	adds	r3, #12
 8002514:	7812      	ldrb	r2, [r2, #0]
 8002516:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251c:	1c5a      	adds	r2, r3, #1
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002526:	b29b      	uxth	r3, r3
 8002528:	3b01      	subs	r3, #1
 800252a:	b29a      	uxth	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002530:	e011      	b.n	8002556 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002532:	f7ff f843 	bl	80015bc <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	429a      	cmp	r2, r3
 8002540:	d803      	bhi.n	800254a <HAL_SPI_Transmit+0x1f4>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002548:	d102      	bne.n	8002550 <HAL_SPI_Transmit+0x1fa>
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d102      	bne.n	8002556 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002554:	e026      	b.n	80025a4 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800255a:	b29b      	uxth	r3, r3
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1cd      	bne.n	80024fc <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	6839      	ldr	r1, [r7, #0]
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f000 fb91 	bl	8002c8c <SPI_EndRxTxTransaction>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d002      	beq.n	8002576 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2220      	movs	r2, #32
 8002574:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10a      	bne.n	8002594 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800257e:	2300      	movs	r3, #0
 8002580:	613b      	str	r3, [r7, #16]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	613b      	str	r3, [r7, #16]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002598:	2b00      	cmp	r3, #0
 800259a:	d002      	beq.n	80025a2 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	77fb      	strb	r3, [r7, #31]
 80025a0:	e000      	b.n	80025a4 <HAL_SPI_Transmit+0x24e>
  }

error:
 80025a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3720      	adds	r7, #32
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b088      	sub	sp, #32
 80025c2:	af02      	add	r7, sp, #8
 80025c4:	60f8      	str	r0, [r7, #12]
 80025c6:	60b9      	str	r1, [r7, #8]
 80025c8:	603b      	str	r3, [r7, #0]
 80025ca:	4613      	mov	r3, r2
 80025cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025ce:	2300      	movs	r3, #0
 80025d0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025da:	d112      	bne.n	8002602 <HAL_SPI_Receive+0x44>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10e      	bne.n	8002602 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2204      	movs	r2, #4
 80025e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80025ec:	88fa      	ldrh	r2, [r7, #6]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	4613      	mov	r3, r2
 80025f4:	68ba      	ldr	r2, [r7, #8]
 80025f6:	68b9      	ldr	r1, [r7, #8]
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f000 f8e9 	bl	80027d0 <HAL_SPI_TransmitReceive>
 80025fe:	4603      	mov	r3, r0
 8002600:	e0e2      	b.n	80027c8 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002608:	2b01      	cmp	r3, #1
 800260a:	d101      	bne.n	8002610 <HAL_SPI_Receive+0x52>
 800260c:	2302      	movs	r3, #2
 800260e:	e0db      	b.n	80027c8 <HAL_SPI_Receive+0x20a>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002618:	f7fe ffd0 	bl	80015bc <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b01      	cmp	r3, #1
 8002628:	d002      	beq.n	8002630 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800262a:	2302      	movs	r3, #2
 800262c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800262e:	e0c2      	b.n	80027b6 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d002      	beq.n	800263c <HAL_SPI_Receive+0x7e>
 8002636:	88fb      	ldrh	r3, [r7, #6]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d102      	bne.n	8002642 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002640:	e0b9      	b.n	80027b6 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2204      	movs	r2, #4
 8002646:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	88fa      	ldrh	r2, [r7, #6]
 800265a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	88fa      	ldrh	r2, [r7, #6]
 8002660:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002688:	d107      	bne.n	800269a <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002698:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a4:	2b40      	cmp	r3, #64	; 0x40
 80026a6:	d007      	beq.n	80026b8 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026b6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d162      	bne.n	8002786 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80026c0:	e02e      	b.n	8002720 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d115      	bne.n	80026fc <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f103 020c 	add.w	r2, r3, #12
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026dc:	7812      	ldrb	r2, [r2, #0]
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e6:	1c5a      	adds	r2, r3, #1
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80026fa:	e011      	b.n	8002720 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026fc:	f7fe ff5e 	bl	80015bc <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	429a      	cmp	r2, r3
 800270a:	d803      	bhi.n	8002714 <HAL_SPI_Receive+0x156>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002712:	d102      	bne.n	800271a <HAL_SPI_Receive+0x15c>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d102      	bne.n	8002720 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800271e:	e04a      	b.n	80027b6 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002724:	b29b      	uxth	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1cb      	bne.n	80026c2 <HAL_SPI_Receive+0x104>
 800272a:	e031      	b.n	8002790 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b01      	cmp	r3, #1
 8002738:	d113      	bne.n	8002762 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68da      	ldr	r2, [r3, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002744:	b292      	uxth	r2, r2
 8002746:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274c:	1c9a      	adds	r2, r3, #2
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002756:	b29b      	uxth	r3, r3
 8002758:	3b01      	subs	r3, #1
 800275a:	b29a      	uxth	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002760:	e011      	b.n	8002786 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002762:	f7fe ff2b 	bl	80015bc <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	429a      	cmp	r2, r3
 8002770:	d803      	bhi.n	800277a <HAL_SPI_Receive+0x1bc>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002778:	d102      	bne.n	8002780 <HAL_SPI_Receive+0x1c2>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d102      	bne.n	8002786 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002784:	e017      	b.n	80027b6 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800278a:	b29b      	uxth	r3, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1cd      	bne.n	800272c <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	6839      	ldr	r1, [r7, #0]
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f000 fa27 	bl	8002be8 <SPI_EndRxTransaction>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d002      	beq.n	80027a6 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2220      	movs	r2, #32
 80027a4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	75fb      	strb	r3, [r7, #23]
 80027b2:	e000      	b.n	80027b6 <HAL_SPI_Receive+0x1f8>
  }

error :
 80027b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08c      	sub	sp, #48	; 0x30
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
 80027dc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80027de:	2301      	movs	r3, #1
 80027e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80027e2:	2300      	movs	r3, #0
 80027e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d101      	bne.n	80027f6 <HAL_SPI_TransmitReceive+0x26>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e18a      	b.n	8002b0c <HAL_SPI_TransmitReceive+0x33c>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027fe:	f7fe fedd 	bl	80015bc <HAL_GetTick>
 8002802:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800280a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002814:	887b      	ldrh	r3, [r7, #2]
 8002816:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002818:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800281c:	2b01      	cmp	r3, #1
 800281e:	d00f      	beq.n	8002840 <HAL_SPI_TransmitReceive+0x70>
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002826:	d107      	bne.n	8002838 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d103      	bne.n	8002838 <HAL_SPI_TransmitReceive+0x68>
 8002830:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002834:	2b04      	cmp	r3, #4
 8002836:	d003      	beq.n	8002840 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002838:	2302      	movs	r3, #2
 800283a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800283e:	e15b      	b.n	8002af8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d005      	beq.n	8002852 <HAL_SPI_TransmitReceive+0x82>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d002      	beq.n	8002852 <HAL_SPI_TransmitReceive+0x82>
 800284c:	887b      	ldrh	r3, [r7, #2]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d103      	bne.n	800285a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002858:	e14e      	b.n	8002af8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b04      	cmp	r3, #4
 8002864:	d003      	beq.n	800286e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2205      	movs	r2, #5
 800286a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	887a      	ldrh	r2, [r7, #2]
 800287e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	887a      	ldrh	r2, [r7, #2]
 8002884:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	887a      	ldrh	r2, [r7, #2]
 8002890:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	887a      	ldrh	r2, [r7, #2]
 8002896:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ae:	2b40      	cmp	r3, #64	; 0x40
 80028b0:	d007      	beq.n	80028c2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028ca:	d178      	bne.n	80029be <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d002      	beq.n	80028da <HAL_SPI_TransmitReceive+0x10a>
 80028d4:	8b7b      	ldrh	r3, [r7, #26]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d166      	bne.n	80029a8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	881a      	ldrh	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	1c9a      	adds	r2, r3, #2
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028fe:	e053      	b.n	80029a8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b02      	cmp	r3, #2
 800290c:	d11b      	bne.n	8002946 <HAL_SPI_TransmitReceive+0x176>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002912:	b29b      	uxth	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	d016      	beq.n	8002946 <HAL_SPI_TransmitReceive+0x176>
 8002918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291a:	2b01      	cmp	r3, #1
 800291c:	d113      	bne.n	8002946 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	881a      	ldrh	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	1c9a      	adds	r2, r3, #2
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002938:	b29b      	uxth	r3, r3
 800293a:	3b01      	subs	r3, #1
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002942:	2300      	movs	r3, #0
 8002944:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b01      	cmp	r3, #1
 8002952:	d119      	bne.n	8002988 <HAL_SPI_TransmitReceive+0x1b8>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002958:	b29b      	uxth	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d014      	beq.n	8002988 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68da      	ldr	r2, [r3, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002968:	b292      	uxth	r2, r2
 800296a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002970:	1c9a      	adds	r2, r3, #2
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800297a:	b29b      	uxth	r3, r3
 800297c:	3b01      	subs	r3, #1
 800297e:	b29a      	uxth	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002984:	2301      	movs	r3, #1
 8002986:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002988:	f7fe fe18 	bl	80015bc <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002994:	429a      	cmp	r2, r3
 8002996:	d807      	bhi.n	80029a8 <HAL_SPI_TransmitReceive+0x1d8>
 8002998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800299a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800299e:	d003      	beq.n	80029a8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80029a6:	e0a7      	b.n	8002af8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1a6      	bne.n	8002900 <HAL_SPI_TransmitReceive+0x130>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1a1      	bne.n	8002900 <HAL_SPI_TransmitReceive+0x130>
 80029bc:	e07c      	b.n	8002ab8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d002      	beq.n	80029cc <HAL_SPI_TransmitReceive+0x1fc>
 80029c6:	8b7b      	ldrh	r3, [r7, #26]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d16b      	bne.n	8002aa4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	330c      	adds	r3, #12
 80029d6:	7812      	ldrb	r2, [r2, #0]
 80029d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	3b01      	subs	r3, #1
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029f2:	e057      	b.n	8002aa4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d11c      	bne.n	8002a3c <HAL_SPI_TransmitReceive+0x26c>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d017      	beq.n	8002a3c <HAL_SPI_TransmitReceive+0x26c>
 8002a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d114      	bne.n	8002a3c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	330c      	adds	r3, #12
 8002a1c:	7812      	ldrb	r2, [r2, #0]
 8002a1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a24:	1c5a      	adds	r2, r3, #1
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d119      	bne.n	8002a7e <HAL_SPI_TransmitReceive+0x2ae>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d014      	beq.n	8002a7e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a66:	1c5a      	adds	r2, r3, #1
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	3b01      	subs	r3, #1
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a7e:	f7fe fd9d 	bl	80015bc <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d803      	bhi.n	8002a96 <HAL_SPI_TransmitReceive+0x2c6>
 8002a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a94:	d102      	bne.n	8002a9c <HAL_SPI_TransmitReceive+0x2cc>
 8002a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d103      	bne.n	8002aa4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002aa2:	e029      	b.n	8002af8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1a2      	bne.n	80029f4 <HAL_SPI_TransmitReceive+0x224>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d19d      	bne.n	80029f4 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f000 f8e5 	bl	8002c8c <SPI_EndRxTxTransaction>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d006      	beq.n	8002ad6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002ad4:	e010      	b.n	8002af8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10b      	bne.n	8002af6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ade:	2300      	movs	r3, #0
 8002ae0:	617b      	str	r3, [r7, #20]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	617b      	str	r3, [r7, #20]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	617b      	str	r3, [r7, #20]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	e000      	b.n	8002af8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002af6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3730      	adds	r7, #48	; 0x30
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	603b      	str	r3, [r7, #0]
 8002b20:	4613      	mov	r3, r2
 8002b22:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b24:	e04c      	b.n	8002bc0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b2c:	d048      	beq.n	8002bc0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002b2e:	f7fe fd45 	bl	80015bc <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d902      	bls.n	8002b44 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d13d      	bne.n	8002bc0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b52:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b5c:	d111      	bne.n	8002b82 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b66:	d004      	beq.n	8002b72 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b70:	d107      	bne.n	8002b82 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b80:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b8a:	d10f      	bne.n	8002bac <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002baa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e00f      	b.n	8002be0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689a      	ldr	r2, [r3, #8]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	bf0c      	ite	eq
 8002bd0:	2301      	moveq	r3, #1
 8002bd2:	2300      	movne	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	79fb      	ldrb	r3, [r7, #7]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d1a3      	bne.n	8002b26 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af02      	add	r7, sp, #8
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bfc:	d111      	bne.n	8002c22 <SPI_EndRxTransaction+0x3a>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c06:	d004      	beq.n	8002c12 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c10:	d107      	bne.n	8002c22 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c20:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c2a:	d117      	bne.n	8002c5c <SPI_EndRxTransaction+0x74>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c34:	d112      	bne.n	8002c5c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	2101      	movs	r1, #1
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f7ff ff67 	bl	8002b14 <SPI_WaitFlagStateUntilTimeout>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d01a      	beq.n	8002c82 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c50:	f043 0220 	orr.w	r2, r3, #32
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e013      	b.n	8002c84 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	2200      	movs	r2, #0
 8002c64:	2180      	movs	r1, #128	; 0x80
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f7ff ff54 	bl	8002b14 <SPI_WaitFlagStateUntilTimeout>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d007      	beq.n	8002c82 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c76:	f043 0220 	orr.w	r2, r3, #32
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e000      	b.n	8002c84 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af02      	add	r7, sp, #8
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	2180      	movs	r1, #128	; 0x80
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f7ff ff36 	bl	8002b14 <SPI_WaitFlagStateUntilTimeout>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d007      	beq.n	8002cbe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb2:	f043 0220 	orr.w	r2, r3, #32
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e000      	b.n	8002cc0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <__errno>:
 8002cc8:	4b01      	ldr	r3, [pc, #4]	; (8002cd0 <__errno+0x8>)
 8002cca:	6818      	ldr	r0, [r3, #0]
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	20000034 	.word	0x20000034

08002cd4 <__libc_init_array>:
 8002cd4:	b570      	push	{r4, r5, r6, lr}
 8002cd6:	2500      	movs	r5, #0
 8002cd8:	4e0c      	ldr	r6, [pc, #48]	; (8002d0c <__libc_init_array+0x38>)
 8002cda:	4c0d      	ldr	r4, [pc, #52]	; (8002d10 <__libc_init_array+0x3c>)
 8002cdc:	1ba4      	subs	r4, r4, r6
 8002cde:	10a4      	asrs	r4, r4, #2
 8002ce0:	42a5      	cmp	r5, r4
 8002ce2:	d109      	bne.n	8002cf8 <__libc_init_array+0x24>
 8002ce4:	f000 fc36 	bl	8003554 <_init>
 8002ce8:	2500      	movs	r5, #0
 8002cea:	4e0a      	ldr	r6, [pc, #40]	; (8002d14 <__libc_init_array+0x40>)
 8002cec:	4c0a      	ldr	r4, [pc, #40]	; (8002d18 <__libc_init_array+0x44>)
 8002cee:	1ba4      	subs	r4, r4, r6
 8002cf0:	10a4      	asrs	r4, r4, #2
 8002cf2:	42a5      	cmp	r5, r4
 8002cf4:	d105      	bne.n	8002d02 <__libc_init_array+0x2e>
 8002cf6:	bd70      	pop	{r4, r5, r6, pc}
 8002cf8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002cfc:	4798      	blx	r3
 8002cfe:	3501      	adds	r5, #1
 8002d00:	e7ee      	b.n	8002ce0 <__libc_init_array+0xc>
 8002d02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d06:	4798      	blx	r3
 8002d08:	3501      	adds	r5, #1
 8002d0a:	e7f2      	b.n	8002cf2 <__libc_init_array+0x1e>
 8002d0c:	08003b08 	.word	0x08003b08
 8002d10:	08003b08 	.word	0x08003b08
 8002d14:	08003b08 	.word	0x08003b08
 8002d18:	08003b0c 	.word	0x08003b0c

08002d1c <memcpy>:
 8002d1c:	b510      	push	{r4, lr}
 8002d1e:	1e43      	subs	r3, r0, #1
 8002d20:	440a      	add	r2, r1
 8002d22:	4291      	cmp	r1, r2
 8002d24:	d100      	bne.n	8002d28 <memcpy+0xc>
 8002d26:	bd10      	pop	{r4, pc}
 8002d28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d30:	e7f7      	b.n	8002d22 <memcpy+0x6>

08002d32 <memset>:
 8002d32:	4603      	mov	r3, r0
 8002d34:	4402      	add	r2, r0
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d100      	bne.n	8002d3c <memset+0xa>
 8002d3a:	4770      	bx	lr
 8002d3c:	f803 1b01 	strb.w	r1, [r3], #1
 8002d40:	e7f9      	b.n	8002d36 <memset+0x4>
	...

08002d44 <siprintf>:
 8002d44:	b40e      	push	{r1, r2, r3}
 8002d46:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002d4a:	b500      	push	{lr}
 8002d4c:	b09c      	sub	sp, #112	; 0x70
 8002d4e:	ab1d      	add	r3, sp, #116	; 0x74
 8002d50:	9002      	str	r0, [sp, #8]
 8002d52:	9006      	str	r0, [sp, #24]
 8002d54:	9107      	str	r1, [sp, #28]
 8002d56:	9104      	str	r1, [sp, #16]
 8002d58:	4808      	ldr	r0, [pc, #32]	; (8002d7c <siprintf+0x38>)
 8002d5a:	4909      	ldr	r1, [pc, #36]	; (8002d80 <siprintf+0x3c>)
 8002d5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d60:	9105      	str	r1, [sp, #20]
 8002d62:	6800      	ldr	r0, [r0, #0]
 8002d64:	a902      	add	r1, sp, #8
 8002d66:	9301      	str	r3, [sp, #4]
 8002d68:	f000 f866 	bl	8002e38 <_svfiprintf_r>
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	9b02      	ldr	r3, [sp, #8]
 8002d70:	701a      	strb	r2, [r3, #0]
 8002d72:	b01c      	add	sp, #112	; 0x70
 8002d74:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d78:	b003      	add	sp, #12
 8002d7a:	4770      	bx	lr
 8002d7c:	20000034 	.word	0x20000034
 8002d80:	ffff0208 	.word	0xffff0208

08002d84 <__ssputs_r>:
 8002d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d88:	688e      	ldr	r6, [r1, #8]
 8002d8a:	4682      	mov	sl, r0
 8002d8c:	429e      	cmp	r6, r3
 8002d8e:	460c      	mov	r4, r1
 8002d90:	4690      	mov	r8, r2
 8002d92:	4699      	mov	r9, r3
 8002d94:	d837      	bhi.n	8002e06 <__ssputs_r+0x82>
 8002d96:	898a      	ldrh	r2, [r1, #12]
 8002d98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002d9c:	d031      	beq.n	8002e02 <__ssputs_r+0x7e>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	6825      	ldr	r5, [r4, #0]
 8002da2:	6909      	ldr	r1, [r1, #16]
 8002da4:	1a6f      	subs	r7, r5, r1
 8002da6:	6965      	ldr	r5, [r4, #20]
 8002da8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002dac:	fb95 f5f3 	sdiv	r5, r5, r3
 8002db0:	f109 0301 	add.w	r3, r9, #1
 8002db4:	443b      	add	r3, r7
 8002db6:	429d      	cmp	r5, r3
 8002db8:	bf38      	it	cc
 8002dba:	461d      	movcc	r5, r3
 8002dbc:	0553      	lsls	r3, r2, #21
 8002dbe:	d530      	bpl.n	8002e22 <__ssputs_r+0x9e>
 8002dc0:	4629      	mov	r1, r5
 8002dc2:	f000 fb2d 	bl	8003420 <_malloc_r>
 8002dc6:	4606      	mov	r6, r0
 8002dc8:	b950      	cbnz	r0, 8002de0 <__ssputs_r+0x5c>
 8002dca:	230c      	movs	r3, #12
 8002dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd0:	f8ca 3000 	str.w	r3, [sl]
 8002dd4:	89a3      	ldrh	r3, [r4, #12]
 8002dd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dda:	81a3      	strh	r3, [r4, #12]
 8002ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002de0:	463a      	mov	r2, r7
 8002de2:	6921      	ldr	r1, [r4, #16]
 8002de4:	f7ff ff9a 	bl	8002d1c <memcpy>
 8002de8:	89a3      	ldrh	r3, [r4, #12]
 8002dea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002df2:	81a3      	strh	r3, [r4, #12]
 8002df4:	6126      	str	r6, [r4, #16]
 8002df6:	443e      	add	r6, r7
 8002df8:	6026      	str	r6, [r4, #0]
 8002dfa:	464e      	mov	r6, r9
 8002dfc:	6165      	str	r5, [r4, #20]
 8002dfe:	1bed      	subs	r5, r5, r7
 8002e00:	60a5      	str	r5, [r4, #8]
 8002e02:	454e      	cmp	r6, r9
 8002e04:	d900      	bls.n	8002e08 <__ssputs_r+0x84>
 8002e06:	464e      	mov	r6, r9
 8002e08:	4632      	mov	r2, r6
 8002e0a:	4641      	mov	r1, r8
 8002e0c:	6820      	ldr	r0, [r4, #0]
 8002e0e:	f000 faa1 	bl	8003354 <memmove>
 8002e12:	68a3      	ldr	r3, [r4, #8]
 8002e14:	2000      	movs	r0, #0
 8002e16:	1b9b      	subs	r3, r3, r6
 8002e18:	60a3      	str	r3, [r4, #8]
 8002e1a:	6823      	ldr	r3, [r4, #0]
 8002e1c:	441e      	add	r6, r3
 8002e1e:	6026      	str	r6, [r4, #0]
 8002e20:	e7dc      	b.n	8002ddc <__ssputs_r+0x58>
 8002e22:	462a      	mov	r2, r5
 8002e24:	f000 fb56 	bl	80034d4 <_realloc_r>
 8002e28:	4606      	mov	r6, r0
 8002e2a:	2800      	cmp	r0, #0
 8002e2c:	d1e2      	bne.n	8002df4 <__ssputs_r+0x70>
 8002e2e:	6921      	ldr	r1, [r4, #16]
 8002e30:	4650      	mov	r0, sl
 8002e32:	f000 faa9 	bl	8003388 <_free_r>
 8002e36:	e7c8      	b.n	8002dca <__ssputs_r+0x46>

08002e38 <_svfiprintf_r>:
 8002e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e3c:	461d      	mov	r5, r3
 8002e3e:	898b      	ldrh	r3, [r1, #12]
 8002e40:	b09d      	sub	sp, #116	; 0x74
 8002e42:	061f      	lsls	r7, r3, #24
 8002e44:	4680      	mov	r8, r0
 8002e46:	460c      	mov	r4, r1
 8002e48:	4616      	mov	r6, r2
 8002e4a:	d50f      	bpl.n	8002e6c <_svfiprintf_r+0x34>
 8002e4c:	690b      	ldr	r3, [r1, #16]
 8002e4e:	b96b      	cbnz	r3, 8002e6c <_svfiprintf_r+0x34>
 8002e50:	2140      	movs	r1, #64	; 0x40
 8002e52:	f000 fae5 	bl	8003420 <_malloc_r>
 8002e56:	6020      	str	r0, [r4, #0]
 8002e58:	6120      	str	r0, [r4, #16]
 8002e5a:	b928      	cbnz	r0, 8002e68 <_svfiprintf_r+0x30>
 8002e5c:	230c      	movs	r3, #12
 8002e5e:	f8c8 3000 	str.w	r3, [r8]
 8002e62:	f04f 30ff 	mov.w	r0, #4294967295
 8002e66:	e0c8      	b.n	8002ffa <_svfiprintf_r+0x1c2>
 8002e68:	2340      	movs	r3, #64	; 0x40
 8002e6a:	6163      	str	r3, [r4, #20]
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	9309      	str	r3, [sp, #36]	; 0x24
 8002e70:	2320      	movs	r3, #32
 8002e72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002e76:	2330      	movs	r3, #48	; 0x30
 8002e78:	f04f 0b01 	mov.w	fp, #1
 8002e7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002e80:	9503      	str	r5, [sp, #12]
 8002e82:	4637      	mov	r7, r6
 8002e84:	463d      	mov	r5, r7
 8002e86:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002e8a:	b10b      	cbz	r3, 8002e90 <_svfiprintf_r+0x58>
 8002e8c:	2b25      	cmp	r3, #37	; 0x25
 8002e8e:	d13e      	bne.n	8002f0e <_svfiprintf_r+0xd6>
 8002e90:	ebb7 0a06 	subs.w	sl, r7, r6
 8002e94:	d00b      	beq.n	8002eae <_svfiprintf_r+0x76>
 8002e96:	4653      	mov	r3, sl
 8002e98:	4632      	mov	r2, r6
 8002e9a:	4621      	mov	r1, r4
 8002e9c:	4640      	mov	r0, r8
 8002e9e:	f7ff ff71 	bl	8002d84 <__ssputs_r>
 8002ea2:	3001      	adds	r0, #1
 8002ea4:	f000 80a4 	beq.w	8002ff0 <_svfiprintf_r+0x1b8>
 8002ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002eaa:	4453      	add	r3, sl
 8002eac:	9309      	str	r3, [sp, #36]	; 0x24
 8002eae:	783b      	ldrb	r3, [r7, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 809d 	beq.w	8002ff0 <_svfiprintf_r+0x1b8>
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ebc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ec0:	9304      	str	r3, [sp, #16]
 8002ec2:	9307      	str	r3, [sp, #28]
 8002ec4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002ec8:	931a      	str	r3, [sp, #104]	; 0x68
 8002eca:	462f      	mov	r7, r5
 8002ecc:	2205      	movs	r2, #5
 8002ece:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002ed2:	4850      	ldr	r0, [pc, #320]	; (8003014 <_svfiprintf_r+0x1dc>)
 8002ed4:	f000 fa30 	bl	8003338 <memchr>
 8002ed8:	9b04      	ldr	r3, [sp, #16]
 8002eda:	b9d0      	cbnz	r0, 8002f12 <_svfiprintf_r+0xda>
 8002edc:	06d9      	lsls	r1, r3, #27
 8002ede:	bf44      	itt	mi
 8002ee0:	2220      	movmi	r2, #32
 8002ee2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002ee6:	071a      	lsls	r2, r3, #28
 8002ee8:	bf44      	itt	mi
 8002eea:	222b      	movmi	r2, #43	; 0x2b
 8002eec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002ef0:	782a      	ldrb	r2, [r5, #0]
 8002ef2:	2a2a      	cmp	r2, #42	; 0x2a
 8002ef4:	d015      	beq.n	8002f22 <_svfiprintf_r+0xea>
 8002ef6:	462f      	mov	r7, r5
 8002ef8:	2000      	movs	r0, #0
 8002efa:	250a      	movs	r5, #10
 8002efc:	9a07      	ldr	r2, [sp, #28]
 8002efe:	4639      	mov	r1, r7
 8002f00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f04:	3b30      	subs	r3, #48	; 0x30
 8002f06:	2b09      	cmp	r3, #9
 8002f08:	d94d      	bls.n	8002fa6 <_svfiprintf_r+0x16e>
 8002f0a:	b1b8      	cbz	r0, 8002f3c <_svfiprintf_r+0x104>
 8002f0c:	e00f      	b.n	8002f2e <_svfiprintf_r+0xf6>
 8002f0e:	462f      	mov	r7, r5
 8002f10:	e7b8      	b.n	8002e84 <_svfiprintf_r+0x4c>
 8002f12:	4a40      	ldr	r2, [pc, #256]	; (8003014 <_svfiprintf_r+0x1dc>)
 8002f14:	463d      	mov	r5, r7
 8002f16:	1a80      	subs	r0, r0, r2
 8002f18:	fa0b f000 	lsl.w	r0, fp, r0
 8002f1c:	4318      	orrs	r0, r3
 8002f1e:	9004      	str	r0, [sp, #16]
 8002f20:	e7d3      	b.n	8002eca <_svfiprintf_r+0x92>
 8002f22:	9a03      	ldr	r2, [sp, #12]
 8002f24:	1d11      	adds	r1, r2, #4
 8002f26:	6812      	ldr	r2, [r2, #0]
 8002f28:	9103      	str	r1, [sp, #12]
 8002f2a:	2a00      	cmp	r2, #0
 8002f2c:	db01      	blt.n	8002f32 <_svfiprintf_r+0xfa>
 8002f2e:	9207      	str	r2, [sp, #28]
 8002f30:	e004      	b.n	8002f3c <_svfiprintf_r+0x104>
 8002f32:	4252      	negs	r2, r2
 8002f34:	f043 0302 	orr.w	r3, r3, #2
 8002f38:	9207      	str	r2, [sp, #28]
 8002f3a:	9304      	str	r3, [sp, #16]
 8002f3c:	783b      	ldrb	r3, [r7, #0]
 8002f3e:	2b2e      	cmp	r3, #46	; 0x2e
 8002f40:	d10c      	bne.n	8002f5c <_svfiprintf_r+0x124>
 8002f42:	787b      	ldrb	r3, [r7, #1]
 8002f44:	2b2a      	cmp	r3, #42	; 0x2a
 8002f46:	d133      	bne.n	8002fb0 <_svfiprintf_r+0x178>
 8002f48:	9b03      	ldr	r3, [sp, #12]
 8002f4a:	3702      	adds	r7, #2
 8002f4c:	1d1a      	adds	r2, r3, #4
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	9203      	str	r2, [sp, #12]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	bfb8      	it	lt
 8002f56:	f04f 33ff 	movlt.w	r3, #4294967295
 8002f5a:	9305      	str	r3, [sp, #20]
 8002f5c:	4d2e      	ldr	r5, [pc, #184]	; (8003018 <_svfiprintf_r+0x1e0>)
 8002f5e:	2203      	movs	r2, #3
 8002f60:	7839      	ldrb	r1, [r7, #0]
 8002f62:	4628      	mov	r0, r5
 8002f64:	f000 f9e8 	bl	8003338 <memchr>
 8002f68:	b138      	cbz	r0, 8002f7a <_svfiprintf_r+0x142>
 8002f6a:	2340      	movs	r3, #64	; 0x40
 8002f6c:	1b40      	subs	r0, r0, r5
 8002f6e:	fa03 f000 	lsl.w	r0, r3, r0
 8002f72:	9b04      	ldr	r3, [sp, #16]
 8002f74:	3701      	adds	r7, #1
 8002f76:	4303      	orrs	r3, r0
 8002f78:	9304      	str	r3, [sp, #16]
 8002f7a:	7839      	ldrb	r1, [r7, #0]
 8002f7c:	2206      	movs	r2, #6
 8002f7e:	4827      	ldr	r0, [pc, #156]	; (800301c <_svfiprintf_r+0x1e4>)
 8002f80:	1c7e      	adds	r6, r7, #1
 8002f82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f86:	f000 f9d7 	bl	8003338 <memchr>
 8002f8a:	2800      	cmp	r0, #0
 8002f8c:	d038      	beq.n	8003000 <_svfiprintf_r+0x1c8>
 8002f8e:	4b24      	ldr	r3, [pc, #144]	; (8003020 <_svfiprintf_r+0x1e8>)
 8002f90:	bb13      	cbnz	r3, 8002fd8 <_svfiprintf_r+0x1a0>
 8002f92:	9b03      	ldr	r3, [sp, #12]
 8002f94:	3307      	adds	r3, #7
 8002f96:	f023 0307 	bic.w	r3, r3, #7
 8002f9a:	3308      	adds	r3, #8
 8002f9c:	9303      	str	r3, [sp, #12]
 8002f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fa0:	444b      	add	r3, r9
 8002fa2:	9309      	str	r3, [sp, #36]	; 0x24
 8002fa4:	e76d      	b.n	8002e82 <_svfiprintf_r+0x4a>
 8002fa6:	fb05 3202 	mla	r2, r5, r2, r3
 8002faa:	2001      	movs	r0, #1
 8002fac:	460f      	mov	r7, r1
 8002fae:	e7a6      	b.n	8002efe <_svfiprintf_r+0xc6>
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	250a      	movs	r5, #10
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	3701      	adds	r7, #1
 8002fb8:	9305      	str	r3, [sp, #20]
 8002fba:	4638      	mov	r0, r7
 8002fbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002fc0:	3a30      	subs	r2, #48	; 0x30
 8002fc2:	2a09      	cmp	r2, #9
 8002fc4:	d903      	bls.n	8002fce <_svfiprintf_r+0x196>
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0c8      	beq.n	8002f5c <_svfiprintf_r+0x124>
 8002fca:	9105      	str	r1, [sp, #20]
 8002fcc:	e7c6      	b.n	8002f5c <_svfiprintf_r+0x124>
 8002fce:	fb05 2101 	mla	r1, r5, r1, r2
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	4607      	mov	r7, r0
 8002fd6:	e7f0      	b.n	8002fba <_svfiprintf_r+0x182>
 8002fd8:	ab03      	add	r3, sp, #12
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	4622      	mov	r2, r4
 8002fde:	4b11      	ldr	r3, [pc, #68]	; (8003024 <_svfiprintf_r+0x1ec>)
 8002fe0:	a904      	add	r1, sp, #16
 8002fe2:	4640      	mov	r0, r8
 8002fe4:	f3af 8000 	nop.w
 8002fe8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002fec:	4681      	mov	r9, r0
 8002fee:	d1d6      	bne.n	8002f9e <_svfiprintf_r+0x166>
 8002ff0:	89a3      	ldrh	r3, [r4, #12]
 8002ff2:	065b      	lsls	r3, r3, #25
 8002ff4:	f53f af35 	bmi.w	8002e62 <_svfiprintf_r+0x2a>
 8002ff8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ffa:	b01d      	add	sp, #116	; 0x74
 8002ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003000:	ab03      	add	r3, sp, #12
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	4622      	mov	r2, r4
 8003006:	4b07      	ldr	r3, [pc, #28]	; (8003024 <_svfiprintf_r+0x1ec>)
 8003008:	a904      	add	r1, sp, #16
 800300a:	4640      	mov	r0, r8
 800300c:	f000 f882 	bl	8003114 <_printf_i>
 8003010:	e7ea      	b.n	8002fe8 <_svfiprintf_r+0x1b0>
 8003012:	bf00      	nop
 8003014:	08003ad4 	.word	0x08003ad4
 8003018:	08003ada 	.word	0x08003ada
 800301c:	08003ade 	.word	0x08003ade
 8003020:	00000000 	.word	0x00000000
 8003024:	08002d85 	.word	0x08002d85

08003028 <_printf_common>:
 8003028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800302c:	4691      	mov	r9, r2
 800302e:	461f      	mov	r7, r3
 8003030:	688a      	ldr	r2, [r1, #8]
 8003032:	690b      	ldr	r3, [r1, #16]
 8003034:	4606      	mov	r6, r0
 8003036:	4293      	cmp	r3, r2
 8003038:	bfb8      	it	lt
 800303a:	4613      	movlt	r3, r2
 800303c:	f8c9 3000 	str.w	r3, [r9]
 8003040:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003044:	460c      	mov	r4, r1
 8003046:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800304a:	b112      	cbz	r2, 8003052 <_printf_common+0x2a>
 800304c:	3301      	adds	r3, #1
 800304e:	f8c9 3000 	str.w	r3, [r9]
 8003052:	6823      	ldr	r3, [r4, #0]
 8003054:	0699      	lsls	r1, r3, #26
 8003056:	bf42      	ittt	mi
 8003058:	f8d9 3000 	ldrmi.w	r3, [r9]
 800305c:	3302      	addmi	r3, #2
 800305e:	f8c9 3000 	strmi.w	r3, [r9]
 8003062:	6825      	ldr	r5, [r4, #0]
 8003064:	f015 0506 	ands.w	r5, r5, #6
 8003068:	d107      	bne.n	800307a <_printf_common+0x52>
 800306a:	f104 0a19 	add.w	sl, r4, #25
 800306e:	68e3      	ldr	r3, [r4, #12]
 8003070:	f8d9 2000 	ldr.w	r2, [r9]
 8003074:	1a9b      	subs	r3, r3, r2
 8003076:	42ab      	cmp	r3, r5
 8003078:	dc29      	bgt.n	80030ce <_printf_common+0xa6>
 800307a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800307e:	6822      	ldr	r2, [r4, #0]
 8003080:	3300      	adds	r3, #0
 8003082:	bf18      	it	ne
 8003084:	2301      	movne	r3, #1
 8003086:	0692      	lsls	r2, r2, #26
 8003088:	d42e      	bmi.n	80030e8 <_printf_common+0xc0>
 800308a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800308e:	4639      	mov	r1, r7
 8003090:	4630      	mov	r0, r6
 8003092:	47c0      	blx	r8
 8003094:	3001      	adds	r0, #1
 8003096:	d021      	beq.n	80030dc <_printf_common+0xb4>
 8003098:	6823      	ldr	r3, [r4, #0]
 800309a:	68e5      	ldr	r5, [r4, #12]
 800309c:	f003 0306 	and.w	r3, r3, #6
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	bf18      	it	ne
 80030a4:	2500      	movne	r5, #0
 80030a6:	f8d9 2000 	ldr.w	r2, [r9]
 80030aa:	f04f 0900 	mov.w	r9, #0
 80030ae:	bf08      	it	eq
 80030b0:	1aad      	subeq	r5, r5, r2
 80030b2:	68a3      	ldr	r3, [r4, #8]
 80030b4:	6922      	ldr	r2, [r4, #16]
 80030b6:	bf08      	it	eq
 80030b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030bc:	4293      	cmp	r3, r2
 80030be:	bfc4      	itt	gt
 80030c0:	1a9b      	subgt	r3, r3, r2
 80030c2:	18ed      	addgt	r5, r5, r3
 80030c4:	341a      	adds	r4, #26
 80030c6:	454d      	cmp	r5, r9
 80030c8:	d11a      	bne.n	8003100 <_printf_common+0xd8>
 80030ca:	2000      	movs	r0, #0
 80030cc:	e008      	b.n	80030e0 <_printf_common+0xb8>
 80030ce:	2301      	movs	r3, #1
 80030d0:	4652      	mov	r2, sl
 80030d2:	4639      	mov	r1, r7
 80030d4:	4630      	mov	r0, r6
 80030d6:	47c0      	blx	r8
 80030d8:	3001      	adds	r0, #1
 80030da:	d103      	bne.n	80030e4 <_printf_common+0xbc>
 80030dc:	f04f 30ff 	mov.w	r0, #4294967295
 80030e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030e4:	3501      	adds	r5, #1
 80030e6:	e7c2      	b.n	800306e <_printf_common+0x46>
 80030e8:	2030      	movs	r0, #48	; 0x30
 80030ea:	18e1      	adds	r1, r4, r3
 80030ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80030f0:	1c5a      	adds	r2, r3, #1
 80030f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80030f6:	4422      	add	r2, r4
 80030f8:	3302      	adds	r3, #2
 80030fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80030fe:	e7c4      	b.n	800308a <_printf_common+0x62>
 8003100:	2301      	movs	r3, #1
 8003102:	4622      	mov	r2, r4
 8003104:	4639      	mov	r1, r7
 8003106:	4630      	mov	r0, r6
 8003108:	47c0      	blx	r8
 800310a:	3001      	adds	r0, #1
 800310c:	d0e6      	beq.n	80030dc <_printf_common+0xb4>
 800310e:	f109 0901 	add.w	r9, r9, #1
 8003112:	e7d8      	b.n	80030c6 <_printf_common+0x9e>

08003114 <_printf_i>:
 8003114:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003118:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800311c:	460c      	mov	r4, r1
 800311e:	7e09      	ldrb	r1, [r1, #24]
 8003120:	b085      	sub	sp, #20
 8003122:	296e      	cmp	r1, #110	; 0x6e
 8003124:	4617      	mov	r7, r2
 8003126:	4606      	mov	r6, r0
 8003128:	4698      	mov	r8, r3
 800312a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800312c:	f000 80b3 	beq.w	8003296 <_printf_i+0x182>
 8003130:	d822      	bhi.n	8003178 <_printf_i+0x64>
 8003132:	2963      	cmp	r1, #99	; 0x63
 8003134:	d036      	beq.n	80031a4 <_printf_i+0x90>
 8003136:	d80a      	bhi.n	800314e <_printf_i+0x3a>
 8003138:	2900      	cmp	r1, #0
 800313a:	f000 80b9 	beq.w	80032b0 <_printf_i+0x19c>
 800313e:	2958      	cmp	r1, #88	; 0x58
 8003140:	f000 8083 	beq.w	800324a <_printf_i+0x136>
 8003144:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003148:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800314c:	e032      	b.n	80031b4 <_printf_i+0xa0>
 800314e:	2964      	cmp	r1, #100	; 0x64
 8003150:	d001      	beq.n	8003156 <_printf_i+0x42>
 8003152:	2969      	cmp	r1, #105	; 0x69
 8003154:	d1f6      	bne.n	8003144 <_printf_i+0x30>
 8003156:	6820      	ldr	r0, [r4, #0]
 8003158:	6813      	ldr	r3, [r2, #0]
 800315a:	0605      	lsls	r5, r0, #24
 800315c:	f103 0104 	add.w	r1, r3, #4
 8003160:	d52a      	bpl.n	80031b8 <_printf_i+0xa4>
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6011      	str	r1, [r2, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	da03      	bge.n	8003172 <_printf_i+0x5e>
 800316a:	222d      	movs	r2, #45	; 0x2d
 800316c:	425b      	negs	r3, r3
 800316e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003172:	486f      	ldr	r0, [pc, #444]	; (8003330 <_printf_i+0x21c>)
 8003174:	220a      	movs	r2, #10
 8003176:	e039      	b.n	80031ec <_printf_i+0xd8>
 8003178:	2973      	cmp	r1, #115	; 0x73
 800317a:	f000 809d 	beq.w	80032b8 <_printf_i+0x1a4>
 800317e:	d808      	bhi.n	8003192 <_printf_i+0x7e>
 8003180:	296f      	cmp	r1, #111	; 0x6f
 8003182:	d020      	beq.n	80031c6 <_printf_i+0xb2>
 8003184:	2970      	cmp	r1, #112	; 0x70
 8003186:	d1dd      	bne.n	8003144 <_printf_i+0x30>
 8003188:	6823      	ldr	r3, [r4, #0]
 800318a:	f043 0320 	orr.w	r3, r3, #32
 800318e:	6023      	str	r3, [r4, #0]
 8003190:	e003      	b.n	800319a <_printf_i+0x86>
 8003192:	2975      	cmp	r1, #117	; 0x75
 8003194:	d017      	beq.n	80031c6 <_printf_i+0xb2>
 8003196:	2978      	cmp	r1, #120	; 0x78
 8003198:	d1d4      	bne.n	8003144 <_printf_i+0x30>
 800319a:	2378      	movs	r3, #120	; 0x78
 800319c:	4865      	ldr	r0, [pc, #404]	; (8003334 <_printf_i+0x220>)
 800319e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80031a2:	e055      	b.n	8003250 <_printf_i+0x13c>
 80031a4:	6813      	ldr	r3, [r2, #0]
 80031a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031aa:	1d19      	adds	r1, r3, #4
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6011      	str	r1, [r2, #0]
 80031b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80031b4:	2301      	movs	r3, #1
 80031b6:	e08c      	b.n	80032d2 <_printf_i+0x1be>
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80031be:	6011      	str	r1, [r2, #0]
 80031c0:	bf18      	it	ne
 80031c2:	b21b      	sxthne	r3, r3
 80031c4:	e7cf      	b.n	8003166 <_printf_i+0x52>
 80031c6:	6813      	ldr	r3, [r2, #0]
 80031c8:	6825      	ldr	r5, [r4, #0]
 80031ca:	1d18      	adds	r0, r3, #4
 80031cc:	6010      	str	r0, [r2, #0]
 80031ce:	0628      	lsls	r0, r5, #24
 80031d0:	d501      	bpl.n	80031d6 <_printf_i+0xc2>
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	e002      	b.n	80031dc <_printf_i+0xc8>
 80031d6:	0668      	lsls	r0, r5, #25
 80031d8:	d5fb      	bpl.n	80031d2 <_printf_i+0xbe>
 80031da:	881b      	ldrh	r3, [r3, #0]
 80031dc:	296f      	cmp	r1, #111	; 0x6f
 80031de:	bf14      	ite	ne
 80031e0:	220a      	movne	r2, #10
 80031e2:	2208      	moveq	r2, #8
 80031e4:	4852      	ldr	r0, [pc, #328]	; (8003330 <_printf_i+0x21c>)
 80031e6:	2100      	movs	r1, #0
 80031e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80031ec:	6865      	ldr	r5, [r4, #4]
 80031ee:	2d00      	cmp	r5, #0
 80031f0:	60a5      	str	r5, [r4, #8]
 80031f2:	f2c0 8095 	blt.w	8003320 <_printf_i+0x20c>
 80031f6:	6821      	ldr	r1, [r4, #0]
 80031f8:	f021 0104 	bic.w	r1, r1, #4
 80031fc:	6021      	str	r1, [r4, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d13d      	bne.n	800327e <_printf_i+0x16a>
 8003202:	2d00      	cmp	r5, #0
 8003204:	f040 808e 	bne.w	8003324 <_printf_i+0x210>
 8003208:	4665      	mov	r5, ip
 800320a:	2a08      	cmp	r2, #8
 800320c:	d10b      	bne.n	8003226 <_printf_i+0x112>
 800320e:	6823      	ldr	r3, [r4, #0]
 8003210:	07db      	lsls	r3, r3, #31
 8003212:	d508      	bpl.n	8003226 <_printf_i+0x112>
 8003214:	6923      	ldr	r3, [r4, #16]
 8003216:	6862      	ldr	r2, [r4, #4]
 8003218:	429a      	cmp	r2, r3
 800321a:	bfde      	ittt	le
 800321c:	2330      	movle	r3, #48	; 0x30
 800321e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003222:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003226:	ebac 0305 	sub.w	r3, ip, r5
 800322a:	6123      	str	r3, [r4, #16]
 800322c:	f8cd 8000 	str.w	r8, [sp]
 8003230:	463b      	mov	r3, r7
 8003232:	aa03      	add	r2, sp, #12
 8003234:	4621      	mov	r1, r4
 8003236:	4630      	mov	r0, r6
 8003238:	f7ff fef6 	bl	8003028 <_printf_common>
 800323c:	3001      	adds	r0, #1
 800323e:	d14d      	bne.n	80032dc <_printf_i+0x1c8>
 8003240:	f04f 30ff 	mov.w	r0, #4294967295
 8003244:	b005      	add	sp, #20
 8003246:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800324a:	4839      	ldr	r0, [pc, #228]	; (8003330 <_printf_i+0x21c>)
 800324c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003250:	6813      	ldr	r3, [r2, #0]
 8003252:	6821      	ldr	r1, [r4, #0]
 8003254:	1d1d      	adds	r5, r3, #4
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6015      	str	r5, [r2, #0]
 800325a:	060a      	lsls	r2, r1, #24
 800325c:	d50b      	bpl.n	8003276 <_printf_i+0x162>
 800325e:	07ca      	lsls	r2, r1, #31
 8003260:	bf44      	itt	mi
 8003262:	f041 0120 	orrmi.w	r1, r1, #32
 8003266:	6021      	strmi	r1, [r4, #0]
 8003268:	b91b      	cbnz	r3, 8003272 <_printf_i+0x15e>
 800326a:	6822      	ldr	r2, [r4, #0]
 800326c:	f022 0220 	bic.w	r2, r2, #32
 8003270:	6022      	str	r2, [r4, #0]
 8003272:	2210      	movs	r2, #16
 8003274:	e7b7      	b.n	80031e6 <_printf_i+0xd2>
 8003276:	064d      	lsls	r5, r1, #25
 8003278:	bf48      	it	mi
 800327a:	b29b      	uxthmi	r3, r3
 800327c:	e7ef      	b.n	800325e <_printf_i+0x14a>
 800327e:	4665      	mov	r5, ip
 8003280:	fbb3 f1f2 	udiv	r1, r3, r2
 8003284:	fb02 3311 	mls	r3, r2, r1, r3
 8003288:	5cc3      	ldrb	r3, [r0, r3]
 800328a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800328e:	460b      	mov	r3, r1
 8003290:	2900      	cmp	r1, #0
 8003292:	d1f5      	bne.n	8003280 <_printf_i+0x16c>
 8003294:	e7b9      	b.n	800320a <_printf_i+0xf6>
 8003296:	6813      	ldr	r3, [r2, #0]
 8003298:	6825      	ldr	r5, [r4, #0]
 800329a:	1d18      	adds	r0, r3, #4
 800329c:	6961      	ldr	r1, [r4, #20]
 800329e:	6010      	str	r0, [r2, #0]
 80032a0:	0628      	lsls	r0, r5, #24
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	d501      	bpl.n	80032aa <_printf_i+0x196>
 80032a6:	6019      	str	r1, [r3, #0]
 80032a8:	e002      	b.n	80032b0 <_printf_i+0x19c>
 80032aa:	066a      	lsls	r2, r5, #25
 80032ac:	d5fb      	bpl.n	80032a6 <_printf_i+0x192>
 80032ae:	8019      	strh	r1, [r3, #0]
 80032b0:	2300      	movs	r3, #0
 80032b2:	4665      	mov	r5, ip
 80032b4:	6123      	str	r3, [r4, #16]
 80032b6:	e7b9      	b.n	800322c <_printf_i+0x118>
 80032b8:	6813      	ldr	r3, [r2, #0]
 80032ba:	1d19      	adds	r1, r3, #4
 80032bc:	6011      	str	r1, [r2, #0]
 80032be:	681d      	ldr	r5, [r3, #0]
 80032c0:	6862      	ldr	r2, [r4, #4]
 80032c2:	2100      	movs	r1, #0
 80032c4:	4628      	mov	r0, r5
 80032c6:	f000 f837 	bl	8003338 <memchr>
 80032ca:	b108      	cbz	r0, 80032d0 <_printf_i+0x1bc>
 80032cc:	1b40      	subs	r0, r0, r5
 80032ce:	6060      	str	r0, [r4, #4]
 80032d0:	6863      	ldr	r3, [r4, #4]
 80032d2:	6123      	str	r3, [r4, #16]
 80032d4:	2300      	movs	r3, #0
 80032d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032da:	e7a7      	b.n	800322c <_printf_i+0x118>
 80032dc:	6923      	ldr	r3, [r4, #16]
 80032de:	462a      	mov	r2, r5
 80032e0:	4639      	mov	r1, r7
 80032e2:	4630      	mov	r0, r6
 80032e4:	47c0      	blx	r8
 80032e6:	3001      	adds	r0, #1
 80032e8:	d0aa      	beq.n	8003240 <_printf_i+0x12c>
 80032ea:	6823      	ldr	r3, [r4, #0]
 80032ec:	079b      	lsls	r3, r3, #30
 80032ee:	d413      	bmi.n	8003318 <_printf_i+0x204>
 80032f0:	68e0      	ldr	r0, [r4, #12]
 80032f2:	9b03      	ldr	r3, [sp, #12]
 80032f4:	4298      	cmp	r0, r3
 80032f6:	bfb8      	it	lt
 80032f8:	4618      	movlt	r0, r3
 80032fa:	e7a3      	b.n	8003244 <_printf_i+0x130>
 80032fc:	2301      	movs	r3, #1
 80032fe:	464a      	mov	r2, r9
 8003300:	4639      	mov	r1, r7
 8003302:	4630      	mov	r0, r6
 8003304:	47c0      	blx	r8
 8003306:	3001      	adds	r0, #1
 8003308:	d09a      	beq.n	8003240 <_printf_i+0x12c>
 800330a:	3501      	adds	r5, #1
 800330c:	68e3      	ldr	r3, [r4, #12]
 800330e:	9a03      	ldr	r2, [sp, #12]
 8003310:	1a9b      	subs	r3, r3, r2
 8003312:	42ab      	cmp	r3, r5
 8003314:	dcf2      	bgt.n	80032fc <_printf_i+0x1e8>
 8003316:	e7eb      	b.n	80032f0 <_printf_i+0x1dc>
 8003318:	2500      	movs	r5, #0
 800331a:	f104 0919 	add.w	r9, r4, #25
 800331e:	e7f5      	b.n	800330c <_printf_i+0x1f8>
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1ac      	bne.n	800327e <_printf_i+0x16a>
 8003324:	7803      	ldrb	r3, [r0, #0]
 8003326:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800332a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800332e:	e76c      	b.n	800320a <_printf_i+0xf6>
 8003330:	08003ae5 	.word	0x08003ae5
 8003334:	08003af6 	.word	0x08003af6

08003338 <memchr>:
 8003338:	b510      	push	{r4, lr}
 800333a:	b2c9      	uxtb	r1, r1
 800333c:	4402      	add	r2, r0
 800333e:	4290      	cmp	r0, r2
 8003340:	4603      	mov	r3, r0
 8003342:	d101      	bne.n	8003348 <memchr+0x10>
 8003344:	2300      	movs	r3, #0
 8003346:	e003      	b.n	8003350 <memchr+0x18>
 8003348:	781c      	ldrb	r4, [r3, #0]
 800334a:	3001      	adds	r0, #1
 800334c:	428c      	cmp	r4, r1
 800334e:	d1f6      	bne.n	800333e <memchr+0x6>
 8003350:	4618      	mov	r0, r3
 8003352:	bd10      	pop	{r4, pc}

08003354 <memmove>:
 8003354:	4288      	cmp	r0, r1
 8003356:	b510      	push	{r4, lr}
 8003358:	eb01 0302 	add.w	r3, r1, r2
 800335c:	d807      	bhi.n	800336e <memmove+0x1a>
 800335e:	1e42      	subs	r2, r0, #1
 8003360:	4299      	cmp	r1, r3
 8003362:	d00a      	beq.n	800337a <memmove+0x26>
 8003364:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003368:	f802 4f01 	strb.w	r4, [r2, #1]!
 800336c:	e7f8      	b.n	8003360 <memmove+0xc>
 800336e:	4283      	cmp	r3, r0
 8003370:	d9f5      	bls.n	800335e <memmove+0xa>
 8003372:	1881      	adds	r1, r0, r2
 8003374:	1ad2      	subs	r2, r2, r3
 8003376:	42d3      	cmn	r3, r2
 8003378:	d100      	bne.n	800337c <memmove+0x28>
 800337a:	bd10      	pop	{r4, pc}
 800337c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003380:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003384:	e7f7      	b.n	8003376 <memmove+0x22>
	...

08003388 <_free_r>:
 8003388:	b538      	push	{r3, r4, r5, lr}
 800338a:	4605      	mov	r5, r0
 800338c:	2900      	cmp	r1, #0
 800338e:	d043      	beq.n	8003418 <_free_r+0x90>
 8003390:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003394:	1f0c      	subs	r4, r1, #4
 8003396:	2b00      	cmp	r3, #0
 8003398:	bfb8      	it	lt
 800339a:	18e4      	addlt	r4, r4, r3
 800339c:	f000 f8d0 	bl	8003540 <__malloc_lock>
 80033a0:	4a1e      	ldr	r2, [pc, #120]	; (800341c <_free_r+0x94>)
 80033a2:	6813      	ldr	r3, [r2, #0]
 80033a4:	4610      	mov	r0, r2
 80033a6:	b933      	cbnz	r3, 80033b6 <_free_r+0x2e>
 80033a8:	6063      	str	r3, [r4, #4]
 80033aa:	6014      	str	r4, [r2, #0]
 80033ac:	4628      	mov	r0, r5
 80033ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033b2:	f000 b8c6 	b.w	8003542 <__malloc_unlock>
 80033b6:	42a3      	cmp	r3, r4
 80033b8:	d90b      	bls.n	80033d2 <_free_r+0x4a>
 80033ba:	6821      	ldr	r1, [r4, #0]
 80033bc:	1862      	adds	r2, r4, r1
 80033be:	4293      	cmp	r3, r2
 80033c0:	bf01      	itttt	eq
 80033c2:	681a      	ldreq	r2, [r3, #0]
 80033c4:	685b      	ldreq	r3, [r3, #4]
 80033c6:	1852      	addeq	r2, r2, r1
 80033c8:	6022      	streq	r2, [r4, #0]
 80033ca:	6063      	str	r3, [r4, #4]
 80033cc:	6004      	str	r4, [r0, #0]
 80033ce:	e7ed      	b.n	80033ac <_free_r+0x24>
 80033d0:	4613      	mov	r3, r2
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	b10a      	cbz	r2, 80033da <_free_r+0x52>
 80033d6:	42a2      	cmp	r2, r4
 80033d8:	d9fa      	bls.n	80033d0 <_free_r+0x48>
 80033da:	6819      	ldr	r1, [r3, #0]
 80033dc:	1858      	adds	r0, r3, r1
 80033de:	42a0      	cmp	r0, r4
 80033e0:	d10b      	bne.n	80033fa <_free_r+0x72>
 80033e2:	6820      	ldr	r0, [r4, #0]
 80033e4:	4401      	add	r1, r0
 80033e6:	1858      	adds	r0, r3, r1
 80033e8:	4282      	cmp	r2, r0
 80033ea:	6019      	str	r1, [r3, #0]
 80033ec:	d1de      	bne.n	80033ac <_free_r+0x24>
 80033ee:	6810      	ldr	r0, [r2, #0]
 80033f0:	6852      	ldr	r2, [r2, #4]
 80033f2:	4401      	add	r1, r0
 80033f4:	6019      	str	r1, [r3, #0]
 80033f6:	605a      	str	r2, [r3, #4]
 80033f8:	e7d8      	b.n	80033ac <_free_r+0x24>
 80033fa:	d902      	bls.n	8003402 <_free_r+0x7a>
 80033fc:	230c      	movs	r3, #12
 80033fe:	602b      	str	r3, [r5, #0]
 8003400:	e7d4      	b.n	80033ac <_free_r+0x24>
 8003402:	6820      	ldr	r0, [r4, #0]
 8003404:	1821      	adds	r1, r4, r0
 8003406:	428a      	cmp	r2, r1
 8003408:	bf01      	itttt	eq
 800340a:	6811      	ldreq	r1, [r2, #0]
 800340c:	6852      	ldreq	r2, [r2, #4]
 800340e:	1809      	addeq	r1, r1, r0
 8003410:	6021      	streq	r1, [r4, #0]
 8003412:	6062      	str	r2, [r4, #4]
 8003414:	605c      	str	r4, [r3, #4]
 8003416:	e7c9      	b.n	80033ac <_free_r+0x24>
 8003418:	bd38      	pop	{r3, r4, r5, pc}
 800341a:	bf00      	nop
 800341c:	20000120 	.word	0x20000120

08003420 <_malloc_r>:
 8003420:	b570      	push	{r4, r5, r6, lr}
 8003422:	1ccd      	adds	r5, r1, #3
 8003424:	f025 0503 	bic.w	r5, r5, #3
 8003428:	3508      	adds	r5, #8
 800342a:	2d0c      	cmp	r5, #12
 800342c:	bf38      	it	cc
 800342e:	250c      	movcc	r5, #12
 8003430:	2d00      	cmp	r5, #0
 8003432:	4606      	mov	r6, r0
 8003434:	db01      	blt.n	800343a <_malloc_r+0x1a>
 8003436:	42a9      	cmp	r1, r5
 8003438:	d903      	bls.n	8003442 <_malloc_r+0x22>
 800343a:	230c      	movs	r3, #12
 800343c:	6033      	str	r3, [r6, #0]
 800343e:	2000      	movs	r0, #0
 8003440:	bd70      	pop	{r4, r5, r6, pc}
 8003442:	f000 f87d 	bl	8003540 <__malloc_lock>
 8003446:	4a21      	ldr	r2, [pc, #132]	; (80034cc <_malloc_r+0xac>)
 8003448:	6814      	ldr	r4, [r2, #0]
 800344a:	4621      	mov	r1, r4
 800344c:	b991      	cbnz	r1, 8003474 <_malloc_r+0x54>
 800344e:	4c20      	ldr	r4, [pc, #128]	; (80034d0 <_malloc_r+0xb0>)
 8003450:	6823      	ldr	r3, [r4, #0]
 8003452:	b91b      	cbnz	r3, 800345c <_malloc_r+0x3c>
 8003454:	4630      	mov	r0, r6
 8003456:	f000 f863 	bl	8003520 <_sbrk_r>
 800345a:	6020      	str	r0, [r4, #0]
 800345c:	4629      	mov	r1, r5
 800345e:	4630      	mov	r0, r6
 8003460:	f000 f85e 	bl	8003520 <_sbrk_r>
 8003464:	1c43      	adds	r3, r0, #1
 8003466:	d124      	bne.n	80034b2 <_malloc_r+0x92>
 8003468:	230c      	movs	r3, #12
 800346a:	4630      	mov	r0, r6
 800346c:	6033      	str	r3, [r6, #0]
 800346e:	f000 f868 	bl	8003542 <__malloc_unlock>
 8003472:	e7e4      	b.n	800343e <_malloc_r+0x1e>
 8003474:	680b      	ldr	r3, [r1, #0]
 8003476:	1b5b      	subs	r3, r3, r5
 8003478:	d418      	bmi.n	80034ac <_malloc_r+0x8c>
 800347a:	2b0b      	cmp	r3, #11
 800347c:	d90f      	bls.n	800349e <_malloc_r+0x7e>
 800347e:	600b      	str	r3, [r1, #0]
 8003480:	18cc      	adds	r4, r1, r3
 8003482:	50cd      	str	r5, [r1, r3]
 8003484:	4630      	mov	r0, r6
 8003486:	f000 f85c 	bl	8003542 <__malloc_unlock>
 800348a:	f104 000b 	add.w	r0, r4, #11
 800348e:	1d23      	adds	r3, r4, #4
 8003490:	f020 0007 	bic.w	r0, r0, #7
 8003494:	1ac3      	subs	r3, r0, r3
 8003496:	d0d3      	beq.n	8003440 <_malloc_r+0x20>
 8003498:	425a      	negs	r2, r3
 800349a:	50e2      	str	r2, [r4, r3]
 800349c:	e7d0      	b.n	8003440 <_malloc_r+0x20>
 800349e:	684b      	ldr	r3, [r1, #4]
 80034a0:	428c      	cmp	r4, r1
 80034a2:	bf16      	itet	ne
 80034a4:	6063      	strne	r3, [r4, #4]
 80034a6:	6013      	streq	r3, [r2, #0]
 80034a8:	460c      	movne	r4, r1
 80034aa:	e7eb      	b.n	8003484 <_malloc_r+0x64>
 80034ac:	460c      	mov	r4, r1
 80034ae:	6849      	ldr	r1, [r1, #4]
 80034b0:	e7cc      	b.n	800344c <_malloc_r+0x2c>
 80034b2:	1cc4      	adds	r4, r0, #3
 80034b4:	f024 0403 	bic.w	r4, r4, #3
 80034b8:	42a0      	cmp	r0, r4
 80034ba:	d005      	beq.n	80034c8 <_malloc_r+0xa8>
 80034bc:	1a21      	subs	r1, r4, r0
 80034be:	4630      	mov	r0, r6
 80034c0:	f000 f82e 	bl	8003520 <_sbrk_r>
 80034c4:	3001      	adds	r0, #1
 80034c6:	d0cf      	beq.n	8003468 <_malloc_r+0x48>
 80034c8:	6025      	str	r5, [r4, #0]
 80034ca:	e7db      	b.n	8003484 <_malloc_r+0x64>
 80034cc:	20000120 	.word	0x20000120
 80034d0:	20000124 	.word	0x20000124

080034d4 <_realloc_r>:
 80034d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034d6:	4607      	mov	r7, r0
 80034d8:	4614      	mov	r4, r2
 80034da:	460e      	mov	r6, r1
 80034dc:	b921      	cbnz	r1, 80034e8 <_realloc_r+0x14>
 80034de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80034e2:	4611      	mov	r1, r2
 80034e4:	f7ff bf9c 	b.w	8003420 <_malloc_r>
 80034e8:	b922      	cbnz	r2, 80034f4 <_realloc_r+0x20>
 80034ea:	f7ff ff4d 	bl	8003388 <_free_r>
 80034ee:	4625      	mov	r5, r4
 80034f0:	4628      	mov	r0, r5
 80034f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034f4:	f000 f826 	bl	8003544 <_malloc_usable_size_r>
 80034f8:	42a0      	cmp	r0, r4
 80034fa:	d20f      	bcs.n	800351c <_realloc_r+0x48>
 80034fc:	4621      	mov	r1, r4
 80034fe:	4638      	mov	r0, r7
 8003500:	f7ff ff8e 	bl	8003420 <_malloc_r>
 8003504:	4605      	mov	r5, r0
 8003506:	2800      	cmp	r0, #0
 8003508:	d0f2      	beq.n	80034f0 <_realloc_r+0x1c>
 800350a:	4631      	mov	r1, r6
 800350c:	4622      	mov	r2, r4
 800350e:	f7ff fc05 	bl	8002d1c <memcpy>
 8003512:	4631      	mov	r1, r6
 8003514:	4638      	mov	r0, r7
 8003516:	f7ff ff37 	bl	8003388 <_free_r>
 800351a:	e7e9      	b.n	80034f0 <_realloc_r+0x1c>
 800351c:	4635      	mov	r5, r6
 800351e:	e7e7      	b.n	80034f0 <_realloc_r+0x1c>

08003520 <_sbrk_r>:
 8003520:	b538      	push	{r3, r4, r5, lr}
 8003522:	2300      	movs	r3, #0
 8003524:	4c05      	ldr	r4, [pc, #20]	; (800353c <_sbrk_r+0x1c>)
 8003526:	4605      	mov	r5, r0
 8003528:	4608      	mov	r0, r1
 800352a:	6023      	str	r3, [r4, #0]
 800352c:	f7fd ff68 	bl	8001400 <_sbrk>
 8003530:	1c43      	adds	r3, r0, #1
 8003532:	d102      	bne.n	800353a <_sbrk_r+0x1a>
 8003534:	6823      	ldr	r3, [r4, #0]
 8003536:	b103      	cbz	r3, 800353a <_sbrk_r+0x1a>
 8003538:	602b      	str	r3, [r5, #0]
 800353a:	bd38      	pop	{r3, r4, r5, pc}
 800353c:	20000184 	.word	0x20000184

08003540 <__malloc_lock>:
 8003540:	4770      	bx	lr

08003542 <__malloc_unlock>:
 8003542:	4770      	bx	lr

08003544 <_malloc_usable_size_r>:
 8003544:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003548:	1f18      	subs	r0, r3, #4
 800354a:	2b00      	cmp	r3, #0
 800354c:	bfbc      	itt	lt
 800354e:	580b      	ldrlt	r3, [r1, r0]
 8003550:	18c0      	addlt	r0, r0, r3
 8003552:	4770      	bx	lr

08003554 <_init>:
 8003554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003556:	bf00      	nop
 8003558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800355a:	bc08      	pop	{r3}
 800355c:	469e      	mov	lr, r3
 800355e:	4770      	bx	lr

08003560 <_fini>:
 8003560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003562:	bf00      	nop
 8003564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003566:	bc08      	pop	{r3}
 8003568:	469e      	mov	lr, r3
 800356a:	4770      	bx	lr
